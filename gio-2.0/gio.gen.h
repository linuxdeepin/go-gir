#pragma once
#include <stdlib.h>
#include <stdint.h>

typedef size_t GType;
typedef void *GVaClosureMarshal;
static unsigned int _array_length(void* _array)
{
	void** array = (void**)_array;
	unsigned int i=0;
	while (array && array[i] != 0) i++;
	return i;
}

typedef void* GBaseFinalizeFunc;
typedef void* GBaseInitFunc;
typedef struct _GBinding GBinding;
typedef uint32_t GBindingFlags;
typedef struct _GBindingGroup GBindingGroup;
typedef void* GBindingTransformFunc;
typedef void* GBoxedCopyFunc;
typedef void* GBoxedFreeFunc;
typedef struct _GCClosure GCClosure;
struct _GCClosure { uint8_t _data[72]; };
typedef void* GCallback;
typedef void* GClassFinalizeFunc;
typedef void* GClassInitFunc;
typedef struct _GClosure GClosure;
struct _GClosure { uint8_t _data[64]; };
typedef void* GClosureMarshal;
typedef void* GClosureNotify;
typedef struct _GClosureNotifyData GClosureNotifyData;
struct _GClosureNotifyData { uint8_t _data[16]; };
typedef uint32_t GConnectFlags;
typedef struct _GEnumClass GEnumClass;
struct _GEnumClass { uint8_t _data[32]; };
typedef struct _GEnumValue GEnumValue;
struct _GEnumValue { uint8_t _data[24]; };
typedef struct _GFlagsClass GFlagsClass;
struct _GFlagsClass { uint8_t _data[24]; };
typedef struct _GFlagsValue GFlagsValue;
struct _GFlagsValue { uint8_t _data[24]; };
typedef struct _GInitiallyUnowned GInitiallyUnowned;
typedef struct _GInitiallyUnownedClass GInitiallyUnownedClass;
struct _GInitiallyUnownedClass { uint8_t _data[136]; };
typedef void* GInstanceInitFunc;
typedef void* GInterfaceFinalizeFunc;
typedef struct _GInterfaceInfo GInterfaceInfo;
struct _GInterfaceInfo { uint8_t _data[24]; };
typedef void* GInterfaceInitFunc;
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
struct _GObjectClass { uint8_t _data[136]; };
typedef struct _GObjectConstructParam GObjectConstructParam;
struct _GObjectConstructParam { uint8_t _data[16]; };
typedef void* GObjectFinalizeFunc;
typedef void* GObjectGetPropertyFunc;
typedef void* GObjectSetPropertyFunc;
typedef uint32_t GParamFlags;
typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecClass GParamSpecClass;
struct _GParamSpecClass { uint8_t _data[80]; };
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecGType GParamSpecGType;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecPool GParamSpecPool;
struct _GParamSpecPool {};
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
struct _GParamSpecTypeInfo { uint8_t _data[56]; };
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecVariant GParamSpecVariant;
typedef struct _GParameter GParameter;
struct _GParameter { uint8_t _data[32]; };
typedef void* GSignalAccumulator;
typedef void* GSignalEmissionHook;
typedef uint32_t GSignalFlags;
typedef struct _GSignalGroup GSignalGroup;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
struct _GSignalInvocationHint { uint8_t _data[12]; };
typedef uint32_t GSignalMatchType;
typedef struct _GSignalQuery GSignalQuery;
struct _GSignalQuery { uint8_t _data[56]; };
typedef void* GToggleNotify;
typedef struct _GTypeCValue GTypeCValue;
struct _GTypeCValue {};
typedef struct _GTypeClass GTypeClass;
struct _GTypeClass { uint8_t _data[8]; };
typedef void* GTypeClassCacheFunc;
typedef uint32_t GTypeDebugFlags;
typedef uint32_t GTypeFlags;
typedef uint32_t GTypeFundamentalFlags;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
struct _GTypeFundamentalInfo { uint8_t _data[4]; };
typedef struct _GTypeInfo GTypeInfo;
struct _GTypeInfo { uint8_t _data[72]; };
typedef struct _GTypeInstance GTypeInstance;
struct _GTypeInstance { uint8_t _data[8]; };
typedef struct _GTypeInterface GTypeInterface;
struct _GTypeInterface { uint8_t _data[16]; };
typedef void* GTypeInterfaceCheckFunc;
typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
struct _GTypeModuleClass { uint8_t _data[184]; };
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypePluginClass GTypePluginClass;
struct _GTypePluginClass { uint8_t _data[48]; };
typedef void* GTypePluginCompleteInterfaceInfo;
typedef void* GTypePluginCompleteTypeInfo;
typedef void* GTypePluginUnuse;
typedef void* GTypePluginUse;
typedef struct _GTypeQuery GTypeQuery;
struct _GTypeQuery { uint8_t _data[24]; };
typedef struct _GTypeValueTable GTypeValueTable;
struct _GTypeValueTable { uint8_t _data[64]; };
typedef struct _GValue GValue;
struct _GValue { uint8_t _data[24]; };
typedef struct _GValueArray GValueArray;
struct _GValueArray { uint8_t _data[24]; };
typedef void* GValueTransform;
typedef void* GWeakNotify;
typedef struct _GWeakRef GWeakRef;
struct _GWeakRef {};
typedef struct _G_Value__data__union G_Value__data__union;
struct _G_Value__data__union { uint8_t _data[8]; };
typedef struct _GArray GArray;
struct _GArray { uint8_t _data[16]; };
typedef uint32_t GAsciiType;
typedef struct _GAsyncQueue GAsyncQueue;
struct _GAsyncQueue {};
typedef struct _GBookmarkFile GBookmarkFile;
struct _GBookmarkFile {};
typedef uint32_t GBookmarkFileError;
typedef struct _GByteArray GByteArray;
struct _GByteArray { uint8_t _data[16]; };
typedef struct _GBytes GBytes;
struct _GBytes {};
typedef struct _GChecksum GChecksum;
struct _GChecksum {};
typedef uint32_t GChecksumType;
typedef void* GChildWatchFunc;
typedef void* GClearHandleFunc;
typedef void* GCompareDataFunc;
typedef void* GCompareFunc;
typedef struct _GCond GCond;
struct _GCond { uint8_t _data[16]; };
typedef uint32_t GConvertError;
typedef void* GCopyFunc;
typedef struct _GData GData;
struct _GData {};
typedef void* GDataForeachFunc;
typedef struct _GDate GDate;
struct _GDate { uint8_t _data[24]; };
typedef uint32_t GDateDMY;
typedef uint32_t GDateMonth;
typedef struct _GDateTime GDateTime;
struct _GDateTime {};
typedef uint32_t GDateWeekday;
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey { uint8_t _data[16]; };
typedef void* GDestroyNotify;
typedef struct _GDir GDir;
struct _GDir {};
typedef struct _GDoubleIEEE754 GDoubleIEEE754;
struct _GDoubleIEEE754 { uint8_t _data[8]; };
typedef void* GDuplicateFunc;
typedef void* GEqualFunc;
typedef struct _GError GError;
struct _GError { uint8_t _data[16]; };
typedef void* GErrorClearFunc;
typedef void* GErrorCopyFunc;
typedef void* GErrorInitFunc;
typedef uint32_t GErrorType;
typedef uint32_t GFileError;
typedef uint32_t GFileSetContentsFlags;
typedef uint32_t GFileTest;
typedef struct _GFloatIEEE754 GFloatIEEE754;
struct _GFloatIEEE754 { uint8_t _data[4]; };
typedef uint32_t GFormatSizeFlags;
typedef void* GFreeFunc;
typedef void* GFunc;
typedef void* GHFunc;
typedef void* GHRFunc;
typedef void* GHashFunc;
typedef struct _GHashTable GHashTable;
struct _GHashTable {};
typedef struct _GHashTableIter GHashTableIter;
struct _GHashTableIter { uint8_t _data[40]; };
typedef struct _GHmac GHmac;
struct _GHmac {};
typedef struct _GHook GHook;
struct _GHook { uint8_t _data[64]; };
typedef void* GHookCheckFunc;
typedef void* GHookCheckMarshaller;
typedef void* GHookCompareFunc;
typedef void* GHookFinalizeFunc;
typedef void* GHookFindFunc;
typedef uint32_t GHookFlagMask;
typedef void* GHookFunc;
typedef struct _GHookList GHookList;
struct _GHookList { uint8_t _data[56]; };
typedef void* GHookMarshaller;
typedef struct _GIOChannel GIOChannel;
struct _GIOChannel { uint8_t _data[136]; };
typedef uint32_t GIOChannelError;
typedef uint32_t GIOCondition;
typedef uint32_t GIOError;
typedef uint32_t GIOFlags;
typedef void* GIOFunc;
typedef struct _GIOFuncs GIOFuncs;
struct _GIOFuncs { uint8_t _data[64]; };
typedef uint32_t GIOStatus;
typedef struct _GKeyFile GKeyFile;
struct _GKeyFile {};
typedef uint32_t GKeyFileError;
typedef uint32_t GKeyFileFlags;
typedef struct _GList GList;
struct _GList { uint8_t _data[24]; };
typedef struct _GLogField GLogField;
struct _GLogField { uint8_t _data[24]; };
typedef void* GLogFunc;
typedef int32_t GLogLevelFlags;
typedef void* GLogWriterFunc;
typedef uint32_t GLogWriterOutput;
typedef struct _GMainContext GMainContext;
struct _GMainContext {};
typedef uint32_t GMainContextFlags;
typedef struct _GMainLoop GMainLoop;
struct _GMainLoop {};
typedef struct _GMappedFile GMappedFile;
struct _GMappedFile {};
typedef uint32_t GMarkupCollectType;
typedef uint32_t GMarkupError;
typedef struct _GMarkupParseContext GMarkupParseContext;
struct _GMarkupParseContext {};
typedef uint32_t GMarkupParseFlags;
typedef struct _GMarkupParser GMarkupParser;
struct _GMarkupParser { uint8_t _data[40]; };
typedef struct _GMatchInfo GMatchInfo;
struct _GMatchInfo {};
typedef struct _GMemVTable GMemVTable;
struct _GMemVTable { uint8_t _data[48]; };
typedef struct _GMutex GMutex;
struct _GMutex { uint8_t _data[8]; };
typedef struct _GNode GNode;
struct _GNode { uint8_t _data[40]; };
typedef void* GNodeForeachFunc;
typedef void* GNodeTraverseFunc;
typedef uint32_t GNormalizeMode;
typedef uint32_t GNumberParserError;
typedef struct _GOnce GOnce;
struct _GOnce { uint8_t _data[16]; };
typedef uint32_t GOnceStatus;
typedef uint32_t GOptionArg;
typedef void* GOptionArgFunc;
typedef struct _GOptionContext GOptionContext;
struct _GOptionContext {};
typedef struct _GOptionEntry GOptionEntry;
struct _GOptionEntry { uint8_t _data[48]; };
typedef uint32_t GOptionError;
typedef void* GOptionErrorFunc;
typedef uint32_t GOptionFlags;
typedef struct _GOptionGroup GOptionGroup;
struct _GOptionGroup {};
typedef void* GOptionParseFunc;
typedef struct _GPatternSpec GPatternSpec;
struct _GPatternSpec {};
typedef struct _GPollFD GPollFD;
struct _GPollFD { uint8_t _data[8]; };
typedef void* GPollFunc;
typedef void* GPrintFunc;
typedef struct _GPrivate GPrivate;
struct _GPrivate { uint8_t _data[32]; };
typedef struct _GPtrArray GPtrArray;
struct _GPtrArray { uint8_t _data[16]; };
typedef struct _GQueue GQueue;
struct _GQueue { uint8_t _data[24]; };
typedef struct _GRWLock GRWLock;
struct _GRWLock { uint8_t _data[16]; };
typedef struct _GRand GRand;
struct _GRand {};
typedef struct _GRecMutex GRecMutex;
struct _GRecMutex { uint8_t _data[16]; };
typedef struct _GRegex GRegex;
struct _GRegex {};
typedef uint32_t GRegexCompileFlags;
typedef uint32_t GRegexError;
typedef void* GRegexEvalCallback;
typedef uint32_t GRegexMatchFlags;
typedef struct _GSList GSList;
struct _GSList { uint8_t _data[16]; };
typedef struct _GScanner GScanner;
struct _GScanner { uint8_t _data[144]; };
typedef struct _GScannerConfig GScannerConfig;
struct _GScannerConfig { uint8_t _data[128]; };
typedef void* GScannerMsgFunc;
typedef uint32_t GSeekType;
typedef struct _GSequence GSequence;
struct _GSequence {};
typedef struct _GSequenceIter GSequenceIter;
struct _GSequenceIter {};
typedef void* GSequenceIterCompareFunc;
typedef uint32_t GShellError;
typedef uint32_t GSliceConfig;
typedef struct _GSource GSource;
struct _GSource { uint8_t _data[96]; };
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
struct _GSourceCallbackFuncs { uint8_t _data[24]; };
typedef void* GSourceDisposeFunc;
typedef void* GSourceDummyMarshal;
typedef void* GSourceFunc;
typedef struct _GSourceFuncs GSourceFuncs;
struct _GSourceFuncs { uint8_t _data[48]; };
typedef struct _GSourcePrivate GSourcePrivate;
struct _GSourcePrivate {};
typedef void* GSpawnChildSetupFunc;
typedef uint32_t GSpawnError;
typedef uint32_t GSpawnFlags;
typedef struct _GStatBuf GStatBuf;
struct _GStatBuf {};
typedef struct _GString GString;
struct _GString { uint8_t _data[24]; };
typedef struct _GStringChunk GStringChunk;
struct _GStringChunk {};
typedef struct _GStrvBuilder GStrvBuilder;
struct _GStrvBuilder {};
typedef struct _GTestCase GTestCase;
struct _GTestCase {};
typedef struct _GTestConfig GTestConfig;
struct _GTestConfig { uint8_t _data[24]; };
typedef void* GTestDataFunc;
typedef uint32_t GTestFileType;
typedef void* GTestFixtureFunc;
typedef void* GTestFunc;
typedef struct _GTestLogBuffer GTestLogBuffer;
struct _GTestLogBuffer { uint8_t _data[16]; };
typedef void* GTestLogFatalFunc;
typedef struct _GTestLogMsg GTestLogMsg;
struct _GTestLogMsg { uint8_t _data[32]; };
typedef uint32_t GTestLogType;
typedef uint32_t GTestResult;
typedef uint32_t GTestSubprocessFlags;
typedef struct _GTestSuite GTestSuite;
struct _GTestSuite {};
typedef uint32_t GTestTrapFlags;
typedef struct _GThread GThread;
struct _GThread {};
typedef uint32_t GThreadError;
typedef void* GThreadFunc;
typedef struct _GThreadPool GThreadPool;
struct _GThreadPool { uint8_t _data[24]; };
typedef uint32_t GTimeType;
typedef struct _GTimeVal GTimeVal;
struct _GTimeVal { uint8_t _data[16]; };
typedef struct _GTimeZone GTimeZone;
struct _GTimeZone {};
typedef struct _GTimer GTimer;
struct _GTimer {};
typedef uint32_t GTokenType;
typedef struct _GTokenValue GTokenValue;
struct _GTokenValue { uint8_t _data[8]; };
typedef void* GTranslateFunc;
typedef struct _GTrashStack GTrashStack;
struct _GTrashStack { uint8_t _data[8]; };
typedef uint32_t GTraverseFlags;
typedef void* GTraverseFunc;
typedef void* GTraverseNodeFunc;
typedef uint32_t GTraverseType;
typedef struct _GTree GTree;
struct _GTree {};
typedef struct _GTreeNode GTreeNode;
struct _GTreeNode {};
typedef uint32_t GUnicodeBreakType;
typedef int32_t GUnicodeScript;
typedef uint32_t GUnicodeType;
typedef void* GUnixFDSourceFunc;
typedef struct _GUri GUri;
struct _GUri {};
typedef uint32_t GUriError;
typedef uint32_t GUriFlags;
typedef uint32_t GUriHideFlags;
typedef uint32_t GUriParamsFlags;
typedef struct _GUriParamsIter GUriParamsIter;
struct _GUriParamsIter { uint8_t _data[280]; };
typedef uint32_t GUserDirectory;
typedef struct _GVariant GVariant;
struct _GVariant {};
typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {};
typedef uint32_t GVariantClass;
typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {};
typedef uint32_t GVariantParseError;
typedef struct _GVariantType GVariantType;
struct _GVariantType {};
typedef void* GVoidFunc;
typedef struct _GAction GAction;
typedef struct _GActionEntry GActionEntry;
typedef struct _GActionGroup GActionGroup;
typedef struct _GActionGroupInterface GActionGroupInterface;
typedef struct _GActionInterface GActionInterface;
typedef struct _GActionMap GActionMap;
typedef struct _GActionMapInterface GActionMapInterface;
typedef struct _GAppInfo GAppInfo;
typedef uint32_t GAppInfoCreateFlags;
typedef struct _GAppInfoIface GAppInfoIface;
typedef struct _GAppInfoMonitor GAppInfoMonitor;
typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
typedef struct _GApplication GApplication;
typedef struct _GApplicationClass GApplicationClass;
typedef struct _GApplicationCommandLine GApplicationCommandLine;
typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;
typedef struct _GApplicationCommandLinePrivate GApplicationCommandLinePrivate;
typedef uint32_t GApplicationFlags;
typedef struct _GApplicationPrivate GApplicationPrivate;
typedef uint32_t GAskPasswordFlags;
typedef struct _GAsyncInitable GAsyncInitable;
typedef struct _GAsyncInitableIface GAsyncInitableIface;
typedef void* GAsyncReadyCallback;
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GAsyncResultIface GAsyncResultIface;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;
typedef void* GBusAcquiredCallback;
typedef void* GBusNameAcquiredCallback;
typedef void* GBusNameAppearedCallback;
typedef void* GBusNameLostCallback;
typedef uint32_t GBusNameOwnerFlags;
typedef void* GBusNameVanishedCallback;
typedef uint32_t GBusNameWatcherFlags;
typedef int32_t GBusType;
typedef struct _GBytesIcon GBytesIcon;
typedef struct _GCancellable GCancellable;
typedef struct _GCancellableClass GCancellableClass;
typedef struct _GCancellablePrivate GCancellablePrivate;
typedef void* GCancellableSourceFunc;
typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GCharsetConverterClass GCharsetConverterClass;
typedef struct _GConverter GConverter;
typedef uint32_t GConverterFlags;
typedef struct _GConverterIface GConverterIface;
typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate;
typedef uint32_t GConverterResult;
typedef struct _GCredentials GCredentials;
typedef struct _GCredentialsClass GCredentialsClass;
typedef uint32_t GCredentialsType;
typedef struct _GDBusActionGroup GDBusActionGroup;
typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
typedef struct _GDBusArgInfo GDBusArgInfo;
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef uint32_t GDBusCallFlags;
typedef uint32_t GDBusCapabilityFlags;
typedef struct _GDBusConnection GDBusConnection;
typedef uint32_t GDBusConnectionFlags;
typedef uint32_t GDBusError;
typedef struct _GDBusErrorEntry GDBusErrorEntry;
typedef struct _GDBusInterface GDBusInterface;
typedef void* GDBusInterfaceGetPropertyFunc;
typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
typedef void* GDBusInterfaceMethodCallFunc;
typedef void* GDBusInterfaceSetPropertyFunc;
typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
typedef uint32_t GDBusInterfaceSkeletonFlags;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;
typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
typedef struct _GDBusMenuModel GDBusMenuModel;
typedef struct _GDBusMessage GDBusMessage;
typedef uint32_t GDBusMessageByteOrder;
typedef void* GDBusMessageFilterFunction;
typedef uint32_t GDBusMessageFlags;
typedef uint32_t GDBusMessageHeaderField;
typedef uint32_t GDBusMessageType;
typedef struct _GDBusMethodInfo GDBusMethodInfo;
typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusNodeInfo GDBusNodeInfo;
typedef struct _GDBusObject GDBusObject;
typedef struct _GDBusObjectIface GDBusObjectIface;
typedef struct _GDBusObjectManager GDBusObjectManager;
typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass;
typedef uint32_t GDBusObjectManagerClientFlags;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;
typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass;
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;
typedef struct _GDBusObjectProxy GDBusObjectProxy;
typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;
typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;
typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
typedef uint32_t GDBusPropertyInfoFlags;
typedef struct _GDBusProxy GDBusProxy;
typedef struct _GDBusProxyClass GDBusProxyClass;
typedef uint32_t GDBusProxyFlags;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;
typedef void* GDBusProxyTypeFunc;
typedef uint32_t GDBusSendMessageFlags;
typedef struct _GDBusServer GDBusServer;
typedef uint32_t GDBusServerFlags;
typedef void* GDBusSignalCallback;
typedef uint32_t GDBusSignalFlags;
typedef struct _GDBusSignalInfo GDBusSignalInfo;
typedef void* GDBusSubtreeDispatchFunc;
typedef void* GDBusSubtreeEnumerateFunc;
typedef uint32_t GDBusSubtreeFlags;
typedef void* GDBusSubtreeIntrospectFunc;
typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
typedef struct _GDataInputStream GDataInputStream;
typedef struct _GDataInputStreamClass GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;
typedef uint32_t GDataStreamByteOrder;
typedef uint32_t GDataStreamNewlineType;
typedef struct _GDatagramBased GDatagramBased;
typedef struct _GDatagramBasedInterface GDatagramBasedInterface;
typedef void* GDatagramBasedSourceFunc;
typedef struct _GDebugController GDebugController;
typedef struct _GDebugControllerDBus GDebugControllerDBus;
typedef struct _GDebugControllerDBusClass GDebugControllerDBusClass;
typedef struct _GDebugControllerInterface GDebugControllerInterface;
typedef struct _GDesktopAppInfo GDesktopAppInfo;
typedef struct _GDesktopAppInfoClass GDesktopAppInfoClass;
typedef struct _GDesktopAppInfoLookup GDesktopAppInfoLookup;
typedef struct _GDesktopAppInfoLookupIface GDesktopAppInfoLookupIface;
typedef void* GDesktopAppLaunchCallback;
typedef struct _GDrive GDrive;
typedef struct _GDriveIface GDriveIface;
typedef uint32_t GDriveStartFlags;
typedef uint32_t GDriveStartStopType;
typedef struct _GDtlsClientConnection GDtlsClientConnection;
typedef struct _GDtlsClientConnectionInterface GDtlsClientConnectionInterface;
typedef struct _GDtlsConnection GDtlsConnection;
typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
typedef struct _GDtlsServerConnection GDtlsServerConnection;
typedef struct _GDtlsServerConnectionInterface GDtlsServerConnectionInterface;
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;
typedef uint32_t GEmblemOrigin;
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;
typedef struct _GFile GFile;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
typedef uint32_t GFileAttributeInfoFlags;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef uint32_t GFileAttributeStatus;
typedef uint32_t GFileAttributeType;
typedef uint32_t GFileCopyFlags;
typedef uint32_t GFileCreateFlags;
typedef struct _GFileDescriptorBased GFileDescriptorBased;
typedef struct _GFileDescriptorBasedIface GFileDescriptorBasedIface;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileIOStreamClass GFileIOStreamClass;
typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;
typedef struct _GFileIcon GFileIcon;
typedef struct _GFileIconClass GFileIconClass;
typedef struct _GFileIface GFileIface;
typedef struct _GFileInfo GFileInfo;
typedef struct _GFileInfoClass GFileInfoClass;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileInputStreamClass GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;
typedef uint32_t GFileMeasureFlags;
typedef void* GFileMeasureProgressCallback;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFileMonitorClass GFileMonitorClass;
typedef uint32_t GFileMonitorEvent;
typedef uint32_t GFileMonitorFlags;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;
typedef void* GFileProgressCallback;
typedef uint32_t GFileQueryInfoFlags;
typedef void* GFileReadMoreCallback;
typedef uint32_t GFileType;
typedef struct _GFilenameCompleter GFilenameCompleter;
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;
typedef uint32_t GFilesystemPreviewType;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;
typedef struct _GFilterOutputStream GFilterOutputStream;
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;
typedef uint32_t GIOErrorEnum;
typedef struct _GIOExtension GIOExtension;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GIOModule GIOModule;
typedef struct _GIOModuleClass GIOModuleClass;
typedef struct _GIOModuleScope GIOModuleScope;
typedef uint32_t GIOModuleScopeFlags;
typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef void* GIOSchedulerJobFunc;
typedef struct _GIOStream GIOStream;
typedef struct _GIOStreamAdapter GIOStreamAdapter;
typedef struct _GIOStreamClass GIOStreamClass;
typedef struct _GIOStreamPrivate GIOStreamPrivate;
typedef uint32_t GIOStreamSpliceFlags;
typedef struct _GIcon GIcon;
typedef struct _GIconIface GIconIface;
typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressClass GInetAddressClass;
typedef struct _GInetAddressMask GInetAddressMask;
typedef struct _GInetAddressMaskClass GInetAddressMaskClass;
typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;
typedef struct _GInetAddressPrivate GInetAddressPrivate;
typedef struct _GInetSocketAddress GInetSocketAddress;
typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;
typedef struct _GInitable GInitable;
typedef struct _GInitableIface GInitableIface;
typedef struct _GInputMessage GInputMessage;
typedef struct _GInputStream GInputStream;
typedef struct _GInputStreamClass GInputStreamClass;
typedef struct _GInputStreamPrivate GInputStreamPrivate;
typedef struct _GInputVector GInputVector;
typedef struct _GListModel GListModel;
typedef struct _GListModelInterface GListModelInterface;
typedef struct _GListStore GListStore;
typedef struct _GListStoreClass GListStoreClass;
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GLoadableIconIface GLoadableIconIface;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;
typedef struct _GMemoryMonitor GMemoryMonitor;
typedef struct _GMemoryMonitorInterface GMemoryMonitorInterface;
typedef uint32_t GMemoryMonitorWarningLevel;
typedef struct _GMemoryOutputStream GMemoryOutputStream;
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;
typedef struct _GMenu GMenu;
typedef struct _GMenuAttributeIter GMenuAttributeIter;
typedef struct _GMenuAttributeIterClass GMenuAttributeIterClass;
typedef struct _GMenuAttributeIterPrivate GMenuAttributeIterPrivate;
typedef struct _GMenuItem GMenuItem;
typedef struct _GMenuLinkIter GMenuLinkIter;
typedef struct _GMenuLinkIterClass GMenuLinkIterClass;
typedef struct _GMenuLinkIterPrivate GMenuLinkIterPrivate;
typedef struct _GMenuModel GMenuModel;
typedef struct _GMenuModelClass GMenuModelClass;
typedef struct _GMenuModelPrivate GMenuModelPrivate;
typedef struct _GMount GMount;
typedef struct _GMountIface GMountIface;
typedef uint32_t GMountMountFlags;
typedef struct _GMountOperation GMountOperation;
typedef struct _GMountOperationClass GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;
typedef uint32_t GMountOperationResult;
typedef uint32_t GMountUnmountFlags;
typedef struct _GNativeSocketAddress GNativeSocketAddress;
typedef struct _GNativeSocketAddressClass GNativeSocketAddressClass;
typedef struct _GNativeSocketAddressPrivate GNativeSocketAddressPrivate;
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkAddressClass GNetworkAddressClass;
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;
typedef uint32_t GNetworkConnectivity;
typedef struct _GNetworkMonitor GNetworkMonitor;
typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;
typedef struct _GNetworkService GNetworkService;
typedef struct _GNetworkServiceClass GNetworkServiceClass;
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;
typedef struct _GNotification GNotification;
typedef uint32_t GNotificationPriority;
typedef struct _GOutputMessage GOutputMessage;
typedef struct _GOutputStream GOutputStream;
typedef struct _GOutputStreamClass GOutputStreamClass;
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;
typedef uint32_t GOutputStreamSpliceFlags;
typedef struct _GOutputVector GOutputVector;
typedef uint32_t GPasswordSave;
typedef struct _GPermission GPermission;
typedef struct _GPermissionClass GPermissionClass;
typedef struct _GPermissionPrivate GPermissionPrivate;
typedef struct _GPollableInputStream GPollableInputStream;
typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
typedef struct _GPollableOutputStream GPollableOutputStream;
typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;
typedef int32_t GPollableReturn;
typedef void* GPollableSourceFunc;
typedef struct _GPowerProfileMonitor GPowerProfileMonitor;
typedef struct _GPowerProfileMonitorInterface GPowerProfileMonitorInterface;
typedef struct _GPropertyAction GPropertyAction;
typedef struct _GProxy GProxy;
typedef struct _GProxyAddress GProxyAddress;
typedef struct _GProxyAddressClass GProxyAddressClass;
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;
typedef struct _GProxyInterface GProxyInterface;
typedef struct _GProxyResolver GProxyResolver;
typedef struct _GProxyResolverInterface GProxyResolverInterface;
typedef void* GReallocFunc;
typedef struct _GRemoteActionGroup GRemoteActionGroup;
typedef struct _GRemoteActionGroupInterface GRemoteActionGroupInterface;
typedef struct _GResolver GResolver;
typedef struct _GResolverClass GResolverClass;
typedef uint32_t GResolverError;
typedef uint32_t GResolverNameLookupFlags;
typedef struct _GResolverPrivate GResolverPrivate;
typedef uint32_t GResolverRecordType;
typedef struct _GResource GResource;
typedef uint32_t GResourceError;
typedef uint32_t GResourceFlags;
typedef uint32_t GResourceLookupFlags;
typedef struct _GSeekable GSeekable;
typedef struct _GSeekableIface GSeekableIface;
typedef struct _GSettings GSettings;
typedef struct _GSettingsBackend GSettingsBackend;
typedef struct _GSettingsBackendClass GSettingsBackendClass;
typedef struct _GSettingsBackendPrivate GSettingsBackendPrivate;
typedef uint32_t GSettingsBindFlags;
typedef void* GSettingsBindGetMapping;
typedef void* GSettingsBindSetMapping;
typedef struct _GSettingsClass GSettingsClass;
typedef void* GSettingsGetMapping;
typedef struct _GSettingsPrivate GSettingsPrivate;
typedef struct _GSettingsSchema GSettingsSchema;
typedef struct _GSettingsSchemaKey GSettingsSchemaKey;
typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
typedef struct _GSimpleAction GSimpleAction;
typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;
typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;
typedef void* GSimpleAsyncThreadFunc;
typedef struct _GSimpleIOStream GSimpleIOStream;
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;
typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
typedef struct _GSocket GSocket;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GSocketAddressClass GSocketAddressClass;
typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;
typedef struct _GSocketClass GSocketClass;
typedef struct _GSocketClient GSocketClient;
typedef struct _GSocketClientClass GSocketClientClass;
typedef uint32_t GSocketClientEvent;
typedef struct _GSocketClientPrivate GSocketClientPrivate;
typedef struct _GSocketConnectable GSocketConnectable;
typedef struct _GSocketConnectableIface GSocketConnectableIface;
typedef struct _GSocketConnection GSocketConnection;
typedef struct _GSocketConnectionClass GSocketConnectionClass;
typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
typedef struct _GSocketControlMessage GSocketControlMessage;
typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
typedef uint32_t GSocketFamily;
typedef struct _GSocketListener GSocketListener;
typedef struct _GSocketListenerClass GSocketListenerClass;
typedef uint32_t GSocketListenerEvent;
typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
typedef uint32_t GSocketMsgFlags;
typedef struct _GSocketPrivate GSocketPrivate;
typedef int32_t GSocketProtocol;
typedef struct _GSocketService GSocketService;
typedef struct _GSocketServiceClass GSocketServiceClass;
typedef struct _GSocketServicePrivate GSocketServicePrivate;
typedef void* GSocketSourceFunc;
typedef uint32_t GSocketType;
typedef struct _GSrvTarget GSrvTarget;
typedef struct _GStaticResource GStaticResource;
typedef struct _GSubprocess GSubprocess;
typedef uint32_t GSubprocessFlags;
typedef struct _GSubprocessLauncher GSubprocessLauncher;
typedef struct _GTask GTask;
typedef struct _GTaskClass GTaskClass;
typedef void* GTaskThreadFunc;
typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpConnectionClass GTcpConnectionClass;
typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;
typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
typedef struct _GTestDBus GTestDBus;
typedef uint32_t GTestDBusFlags;
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GThemedIconClass GThemedIconClass;
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;
typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate;
typedef uint32_t GTlsAuthenticationMode;
typedef struct _GTlsBackend GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;
typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsCertificateClass GTlsCertificateClass;
typedef uint32_t GTlsCertificateFlags;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;
typedef uint32_t GTlsCertificateRequestFlags;
typedef uint32_t GTlsChannelBindingError;
typedef uint32_t GTlsChannelBindingType;
typedef struct _GTlsClientConnection GTlsClientConnection;
typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsConnectionClass GTlsConnectionClass;
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;
typedef struct _GTlsDatabase GTlsDatabase;
typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
typedef uint32_t GTlsDatabaseLookupFlags;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;
typedef uint32_t GTlsDatabaseVerifyFlags;
typedef uint32_t GTlsError;
typedef struct _GTlsFileDatabase GTlsFileDatabase;
typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
typedef struct _GTlsInteraction GTlsInteraction;
typedef struct _GTlsInteractionClass GTlsInteractionClass;
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;
typedef uint32_t GTlsInteractionResult;
typedef struct _GTlsPassword GTlsPassword;
typedef struct _GTlsPasswordClass GTlsPasswordClass;
typedef uint32_t GTlsPasswordFlags;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;
typedef uint32_t GTlsProtocolVersion;
typedef uint32_t GTlsRehandshakeMode;
typedef struct _GTlsServerConnection GTlsServerConnection;
typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;
typedef struct _GUnixConnection GUnixConnection;
typedef struct _GUnixConnectionClass GUnixConnectionClass;
typedef struct _GUnixConnectionPrivate GUnixConnectionPrivate;
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
typedef struct _GUnixCredentialsMessageClass GUnixCredentialsMessageClass;
typedef struct _GUnixCredentialsMessagePrivate GUnixCredentialsMessagePrivate;
typedef struct _GUnixFDList GUnixFDList;
typedef struct _GUnixFDListClass GUnixFDListClass;
typedef struct _GUnixFDListPrivate GUnixFDListPrivate;
typedef struct _GUnixFDMessage GUnixFDMessage;
typedef struct _GUnixFDMessageClass GUnixFDMessageClass;
typedef struct _GUnixFDMessagePrivate GUnixFDMessagePrivate;
typedef struct _GUnixInputStream GUnixInputStream;
typedef struct _GUnixInputStreamClass GUnixInputStreamClass;
typedef struct _GUnixInputStreamPrivate GUnixInputStreamPrivate;
typedef struct _GUnixMountEntry GUnixMountEntry;
typedef struct _GUnixMountMonitor GUnixMountMonitor;
typedef struct _GUnixMountMonitorClass GUnixMountMonitorClass;
typedef struct _GUnixMountPoint GUnixMountPoint;
typedef struct _GUnixOutputStream GUnixOutputStream;
typedef struct _GUnixOutputStreamClass GUnixOutputStreamClass;
typedef struct _GUnixOutputStreamPrivate GUnixOutputStreamPrivate;
typedef struct _GUnixSocketAddress GUnixSocketAddress;
typedef struct _GUnixSocketAddressClass GUnixSocketAddressClass;
typedef struct _GUnixSocketAddressPrivate GUnixSocketAddressPrivate;
typedef uint32_t GUnixSocketAddressType;
typedef struct _GVfs GVfs;
typedef struct _GVfsClass GVfsClass;
typedef void* GVfsFileLookupFunc;
typedef struct _GVolume GVolume;
typedef struct _GVolumeIface GVolumeIface;
typedef struct _GVolumeMonitor GVolumeMonitor;
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibCompressorClass GZlibCompressorClass;
typedef uint32_t GZlibCompressorFormat;
typedef struct _GZlibDecompressor GZlibDecompressor;
typedef struct _GZlibDecompressorClass GZlibDecompressorClass;
extern int g_action_name_is_valid(char*);
extern int g_action_parse_detailed_name(char*, char**, GVariant**, GError**);
extern char* g_action_print_detailed_name(char*, GVariant*);
extern void g_action_activate(GAction*, GVariant*);
extern void g_action_change_state(GAction*, GVariant*);
extern int g_action_get_enabled(GAction*);
extern char* g_action_get_name(GAction*);
extern GVariantType* g_action_get_parameter_type(GAction*);
extern GVariant* g_action_get_state(GAction*);
extern GVariant* g_action_get_state_hint(GAction*);
extern GVariantType* g_action_get_state_type(GAction*);
extern GType g_action_get_type();
extern void g_action_group_action_added(GActionGroup*, char*);
extern void g_action_group_action_enabled_changed(GActionGroup*, char*, int);
extern void g_action_group_action_removed(GActionGroup*, char*);
extern void g_action_group_action_state_changed(GActionGroup*, char*, GVariant*);
extern void g_action_group_activate_action(GActionGroup*, char*, GVariant*);
extern void g_action_group_change_action_state(GActionGroup*, char*, GVariant*);
extern int g_action_group_get_action_enabled(GActionGroup*, char*);
extern GVariantType* g_action_group_get_action_parameter_type(GActionGroup*, char*);
extern GVariant* g_action_group_get_action_state(GActionGroup*, char*);
extern GVariant* g_action_group_get_action_state_hint(GActionGroup*, char*);
extern GVariantType* g_action_group_get_action_state_type(GActionGroup*, char*);
extern int g_action_group_has_action(GActionGroup*, char*);
extern char** g_action_group_list_actions(GActionGroup*);
extern int g_action_group_query_action(GActionGroup*, char*, int*, GVariantType**, GVariantType**, GVariant**, GVariant**);
extern GType g_action_group_get_type();
extern void g_action_map_add_action(GActionMap*, GAction*);
extern void g_action_map_add_action_entries(GActionMap*, GActionEntry*, int32_t, void*);
extern GAction* g_action_map_lookup_action(GActionMap*, char*);
extern void g_action_map_remove_action(GActionMap*, char*);
extern GType g_action_map_get_type();
extern GAppInfo* g_app_info_create_from_commandline(char*, char*, GAppInfoCreateFlags, GError**);
extern GList* g_app_info_get_all();
extern GList* g_app_info_get_all_for_type(char*);
extern GAppInfo* g_app_info_get_default_for_type(char*, int);
extern GAppInfo* g_app_info_get_default_for_uri_scheme(char*);
extern GList* g_app_info_get_fallback_for_type(char*);
extern GList* g_app_info_get_recommended_for_type(char*);
extern int g_app_info_launch_default_for_uri(char*, GAppLaunchContext*, GError**);
extern void g_app_info_launch_default_for_uri_async(char*, GAppLaunchContext*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_app_info_launch_default_for_uri_finish(GAsyncResult*, GError**);
extern void g_app_info_reset_type_associations(char*);
extern int g_app_info_add_supports_type(GAppInfo*, char*, GError**);
extern int g_app_info_can_delete(GAppInfo*);
extern int g_app_info_can_remove_supports_type(GAppInfo*);
extern int g_app_info_delete(GAppInfo*);
extern GAppInfo* g_app_info_dup(GAppInfo*);
extern int g_app_info_equal(GAppInfo*, GAppInfo*);
extern char* g_app_info_get_commandline(GAppInfo*);
extern char* g_app_info_get_description(GAppInfo*);
extern char* g_app_info_get_display_name(GAppInfo*);
extern char* g_app_info_get_executable(GAppInfo*);
extern GIcon* g_app_info_get_icon(GAppInfo*);
extern char* g_app_info_get_id(GAppInfo*);
extern char* g_app_info_get_name(GAppInfo*);
extern char** g_app_info_get_supported_types(GAppInfo*);
extern int g_app_info_launch(GAppInfo*, GList*, GAppLaunchContext*, GError**);
extern int g_app_info_launch_uris(GAppInfo*, GList*, GAppLaunchContext*, GError**);
extern void g_app_info_launch_uris_async(GAppInfo*, GList*, GAppLaunchContext*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_app_info_launch_uris_finish(GAppInfo*, GAsyncResult*, GError**);
extern int g_app_info_remove_supports_type(GAppInfo*, char*, GError**);
extern int g_app_info_set_as_default_for_extension(GAppInfo*, char*, GError**);
extern int g_app_info_set_as_default_for_type(GAppInfo*, char*, GError**);
extern int g_app_info_set_as_last_used_for_type(GAppInfo*, char*, GError**);
extern int g_app_info_should_show(GAppInfo*);
extern int g_app_info_supports_files(GAppInfo*);
extern int g_app_info_supports_uris(GAppInfo*);
extern GType g_app_info_get_type();
extern GAppInfoMonitor* g_app_info_monitor_get();
extern GType g_app_info_monitor_get_type();
extern GAppLaunchContext* g_app_launch_context_new();
extern char* g_app_launch_context_get_display(GAppLaunchContext*, GAppInfo*, GList*);
extern char** g_app_launch_context_get_environment(GAppLaunchContext*);
extern char* g_app_launch_context_get_startup_notify_id(GAppLaunchContext*, GAppInfo*, GList*);
extern void g_app_launch_context_launch_failed(GAppLaunchContext*, char*);
extern void g_app_launch_context_setenv(GAppLaunchContext*, char*, char*);
extern void g_app_launch_context_unsetenv(GAppLaunchContext*, char*);
extern GType g_app_launch_context_get_type();
extern GApplication* g_application_new(char*, GApplicationFlags);
extern GApplication* g_application_get_default();
extern int g_application_id_is_valid(char*);
extern void g_application_activate(GApplication*);
extern void g_application_add_main_option(GApplication*, char*, int8_t, GOptionFlags, GOptionArg, char*, char*);
extern void g_application_add_main_option_entries(GApplication*, GOptionEntry*);
extern void g_application_add_option_group(GApplication*, GOptionGroup*);
extern void g_application_bind_busy_property(GApplication*, GObject*, char*);
extern char* g_application_get_application_id(GApplication*);
extern GDBusConnection* g_application_get_dbus_connection(GApplication*);
extern char* g_application_get_dbus_object_path(GApplication*);
extern GApplicationFlags g_application_get_flags(GApplication*);
extern uint32_t g_application_get_inactivity_timeout(GApplication*);
extern int g_application_get_is_busy(GApplication*);
extern int g_application_get_is_registered(GApplication*);
extern int g_application_get_is_remote(GApplication*);
extern char* g_application_get_resource_base_path(GApplication*);
extern void g_application_hold(GApplication*);
extern void g_application_mark_busy(GApplication*);
extern void g_application_open(GApplication*, GFile**, int32_t, char*);
extern void g_application_quit(GApplication*);
extern int g_application_register(GApplication*, GCancellable*, GError**);
extern void g_application_release(GApplication*);
extern int32_t g_application_run(GApplication*, int32_t, char**);
extern void g_application_send_notification(GApplication*, char*, GNotification*);
extern void g_application_set_action_group(GApplication*, GActionGroup*);
extern void g_application_set_application_id(GApplication*, char*);
extern void g_application_set_default(GApplication*);
extern void g_application_set_flags(GApplication*, GApplicationFlags);
extern void g_application_set_inactivity_timeout(GApplication*, uint32_t);
extern void g_application_set_option_context_description(GApplication*, char*);
extern void g_application_set_option_context_parameter_string(GApplication*, char*);
extern void g_application_set_option_context_summary(GApplication*, char*);
extern void g_application_set_resource_base_path(GApplication*, char*);
extern void g_application_unbind_busy_property(GApplication*, GObject*, char*);
extern void g_application_unmark_busy(GApplication*);
extern void g_application_withdraw_notification(GApplication*, char*);
extern GType g_application_get_type();
extern GFile* g_application_command_line_create_file_for_arg(GApplicationCommandLine*, char*);
extern char** g_application_command_line_get_arguments(GApplicationCommandLine*, int32_t*);
extern char* g_application_command_line_get_cwd(GApplicationCommandLine*);
extern char** g_application_command_line_get_environ(GApplicationCommandLine*);
extern int32_t g_application_command_line_get_exit_status(GApplicationCommandLine*);
extern int g_application_command_line_get_is_remote(GApplicationCommandLine*);
extern GVariantDict* g_application_command_line_get_options_dict(GApplicationCommandLine*);
extern GVariant* g_application_command_line_get_platform_data(GApplicationCommandLine*);
extern GInputStream* g_application_command_line_get_stdin(GApplicationCommandLine*);
extern char* g_application_command_line_getenv(GApplicationCommandLine*, char*);
extern void g_application_command_line_set_exit_status(GApplicationCommandLine*, int32_t);
extern GType g_application_command_line_get_type();
extern void g_async_initable_newv_async(GType, uint32_t, GParameter*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void g_async_initable_init_async(GAsyncInitable*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern int g_async_initable_init_finish(GAsyncInitable*, GAsyncResult*, GError**);
extern GObject* g_async_initable_new_finish(GAsyncInitable*, GAsyncResult*, GError**);
extern GType g_async_initable_get_type();
extern GObject* g_async_result_get_source_object(GAsyncResult*);
extern void* g_async_result_get_user_data(GAsyncResult*);
extern int g_async_result_is_tagged(GAsyncResult*, void*);
extern int g_async_result_legacy_propagate_error(GAsyncResult*, GError**);
extern GType g_async_result_get_type();
extern GInputStream* g_buffered_input_stream_new(GInputStream*);
extern GInputStream* g_buffered_input_stream_new_sized(GInputStream*, uint64_t);
extern int64_t g_buffered_input_stream_fill(GBufferedInputStream*, int64_t, GCancellable*, GError**);
extern void g_buffered_input_stream_fill_async(GBufferedInputStream*, int64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern int64_t g_buffered_input_stream_fill_finish(GBufferedInputStream*, GAsyncResult*, GError**);
extern uint64_t g_buffered_input_stream_get_available(GBufferedInputStream*);
extern uint64_t g_buffered_input_stream_get_buffer_size(GBufferedInputStream*);
extern uint64_t g_buffered_input_stream_peek(GBufferedInputStream*, uint8_t*, uint64_t, uint64_t);
extern uint8_t* g_buffered_input_stream_peek_buffer(GBufferedInputStream*, uint64_t*);
extern int32_t g_buffered_input_stream_read_byte(GBufferedInputStream*, GCancellable*, GError**);
extern void g_buffered_input_stream_set_buffer_size(GBufferedInputStream*, uint64_t);
extern GType g_buffered_input_stream_get_type();
extern GOutputStream* g_buffered_output_stream_new(GOutputStream*);
extern GOutputStream* g_buffered_output_stream_new_sized(GOutputStream*, uint64_t);
extern int g_buffered_output_stream_get_auto_grow(GBufferedOutputStream*);
extern uint64_t g_buffered_output_stream_get_buffer_size(GBufferedOutputStream*);
extern void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream*, int);
extern void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream*, uint64_t);
extern GType g_buffered_output_stream_get_type();
extern GBytesIcon* g_bytes_icon_new(GBytes*);
extern GBytes* g_bytes_icon_get_bytes(GBytesIcon*);
extern GType g_bytes_icon_get_type();
extern GCancellable* g_cancellable_new();
extern GCancellable* g_cancellable_get_current();
extern void g_cancellable_cancel(GCancellable*);
extern uint64_t g_cancellable_connect(GCancellable*, GCallback, void*, GDestroyNotify);
extern void g_cancellable_disconnect(GCancellable*, uint64_t);
extern int32_t g_cancellable_get_fd(GCancellable*);
extern int g_cancellable_is_cancelled(GCancellable*);
extern int g_cancellable_make_pollfd(GCancellable*, GPollFD*);
extern void g_cancellable_pop_current(GCancellable*);
extern void g_cancellable_push_current(GCancellable*);
extern void g_cancellable_release_fd(GCancellable*);
extern void g_cancellable_reset(GCancellable*);
extern int g_cancellable_set_error_if_cancelled(GCancellable*, GError**);
extern GSource* g_cancellable_source_new(GCancellable*);
extern GType g_cancellable_get_type();
extern GCharsetConverter* g_charset_converter_new(char*, char*, GError**);
extern uint32_t g_charset_converter_get_num_fallbacks(GCharsetConverter*);
extern int g_charset_converter_get_use_fallback(GCharsetConverter*);
extern void g_charset_converter_set_use_fallback(GCharsetConverter*, int);
extern GType g_charset_converter_get_type();
extern GConverterResult g_converter_convert(GConverter*, uint8_t*, uint64_t, uint8_t*, uint64_t, GConverterFlags, uint64_t*, uint64_t*, GError**);
extern void g_converter_reset(GConverter*);
extern GType g_converter_get_type();
extern GInputStream* g_converter_input_stream_new(GInputStream*, GConverter*);
extern GConverter* g_converter_input_stream_get_converter(GConverterInputStream*);
extern GType g_converter_input_stream_get_type();
extern GOutputStream* g_converter_output_stream_new(GOutputStream*, GConverter*);
extern GConverter* g_converter_output_stream_get_converter(GConverterOutputStream*);
extern GType g_converter_output_stream_get_type();
extern GCredentials* g_credentials_new();
extern int32_t g_credentials_get_unix_pid(GCredentials*, GError**);
extern uint32_t g_credentials_get_unix_user(GCredentials*, GError**);
extern int g_credentials_is_same_user(GCredentials*, GCredentials*, GError**);
extern void g_credentials_set_native(GCredentials*, GCredentialsType, void*);
extern int g_credentials_set_unix_user(GCredentials*, uint32_t, GError**);
extern char* g_credentials_to_string(GCredentials*);
extern GType g_credentials_get_type();
extern GDBusActionGroup* g_dbus_action_group_get(GDBusConnection*, char*, char*);
extern GType g_dbus_action_group_get_type();
extern GDBusAnnotationInfo* g_dbus_annotation_info_ref(GDBusAnnotationInfo*);
extern void g_dbus_annotation_info_unref(GDBusAnnotationInfo*);
extern char* g_dbus_annotation_info_lookup(GDBusAnnotationInfo**, char*);
extern GDBusArgInfo* g_dbus_arg_info_ref(GDBusArgInfo*);
extern void g_dbus_arg_info_unref(GDBusArgInfo*);
extern GDBusAuthObserver* g_dbus_auth_observer_new();
extern int g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver*, char*);
extern int g_dbus_auth_observer_authorize_authenticated_peer(GDBusAuthObserver*, GIOStream*, GCredentials*);
extern GType g_dbus_auth_observer_get_type();
extern GDBusConnection* g_dbus_connection_new_finish(GAsyncResult*, GError**);
extern GDBusConnection* g_dbus_connection_new_for_address_finish(GAsyncResult*, GError**);
extern GDBusConnection* g_dbus_connection_new_for_address_sync(char*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GError**);
extern GDBusConnection* g_dbus_connection_new_sync(GIOStream*, char*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GError**);
extern void g_dbus_connection_new(GIOStream*, char*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GAsyncReadyCallback, void*);
extern void g_dbus_connection_new_for_address(char*, GDBusConnectionFlags, GDBusAuthObserver*, GCancellable*, GAsyncReadyCallback, void*);
extern uint32_t g_dbus_connection_add_filter(GDBusConnection*, GDBusMessageFilterFunction, void*, GDestroyNotify);
extern void g_dbus_connection_call(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, GDBusCallFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern GVariant* g_dbus_connection_call_finish(GDBusConnection*, GAsyncResult*, GError**);
extern GVariant* g_dbus_connection_call_sync(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, GDBusCallFlags, int32_t, GCancellable*, GError**);
extern void g_dbus_connection_call_with_unix_fd_list(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, GDBusCallFlags, int32_t, GUnixFDList*, GCancellable*, GAsyncReadyCallback, void*);
extern GVariant* g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection*, GUnixFDList**, GAsyncResult*, GError**);
extern GVariant* g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection*, char*, char*, char*, char*, GVariant*, GVariantType*, GDBusCallFlags, int32_t, GUnixFDList*, GUnixFDList**, GCancellable*, GError**);
extern void g_dbus_connection_close(GDBusConnection*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_dbus_connection_close_finish(GDBusConnection*, GAsyncResult*, GError**);
extern int g_dbus_connection_close_sync(GDBusConnection*, GCancellable*, GError**);
extern int g_dbus_connection_emit_signal(GDBusConnection*, char*, char*, char*, char*, GVariant*, GError**);
extern uint32_t g_dbus_connection_export_action_group(GDBusConnection*, char*, GActionGroup*, GError**);
extern uint32_t g_dbus_connection_export_menu_model(GDBusConnection*, char*, GMenuModel*, GError**);
extern void g_dbus_connection_flush(GDBusConnection*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_dbus_connection_flush_finish(GDBusConnection*, GAsyncResult*, GError**);
extern int g_dbus_connection_flush_sync(GDBusConnection*, GCancellable*, GError**);
extern GDBusCapabilityFlags g_dbus_connection_get_capabilities(GDBusConnection*);
extern int g_dbus_connection_get_exit_on_close(GDBusConnection*);
extern GDBusConnectionFlags g_dbus_connection_get_flags(GDBusConnection*);
extern char* g_dbus_connection_get_guid(GDBusConnection*);
extern uint32_t g_dbus_connection_get_last_serial(GDBusConnection*);
extern GCredentials* g_dbus_connection_get_peer_credentials(GDBusConnection*);
extern GIOStream* g_dbus_connection_get_stream(GDBusConnection*);
extern char* g_dbus_connection_get_unique_name(GDBusConnection*);
extern int g_dbus_connection_is_closed(GDBusConnection*);
extern uint32_t g_dbus_connection_register_object_with_closures(GDBusConnection*, char*, GDBusInterfaceInfo*, GClosure*, GClosure*, GClosure*, GError**);
extern uint32_t g_dbus_connection_register_subtree(GDBusConnection*, char*, GDBusSubtreeVTable*, GDBusSubtreeFlags, void*, GDestroyNotify, GError**);
extern void g_dbus_connection_remove_filter(GDBusConnection*, uint32_t);
extern int g_dbus_connection_send_message(GDBusConnection*, GDBusMessage*, GDBusSendMessageFlags, uint32_t*, GError**);
extern void g_dbus_connection_send_message_with_reply(GDBusConnection*, GDBusMessage*, GDBusSendMessageFlags, int32_t, uint32_t*, GCancellable*, GAsyncReadyCallback, void*);
extern GDBusMessage* g_dbus_connection_send_message_with_reply_finish(GDBusConnection*, GAsyncResult*, GError**);
extern GDBusMessage* g_dbus_connection_send_message_with_reply_sync(GDBusConnection*, GDBusMessage*, GDBusSendMessageFlags, int32_t, uint32_t*, GCancellable*, GError**);
extern void g_dbus_connection_set_exit_on_close(GDBusConnection*, int);
extern uint32_t g_dbus_connection_signal_subscribe(GDBusConnection*, char*, char*, char*, char*, char*, GDBusSignalFlags, GDBusSignalCallback, void*, GDestroyNotify);
extern void g_dbus_connection_signal_unsubscribe(GDBusConnection*, uint32_t);
extern void g_dbus_connection_start_message_processing(GDBusConnection*);
extern void g_dbus_connection_unexport_action_group(GDBusConnection*, uint32_t);
extern void g_dbus_connection_unexport_menu_model(GDBusConnection*, uint32_t);
extern int g_dbus_connection_unregister_object(GDBusConnection*, uint32_t);
extern int g_dbus_connection_unregister_subtree(GDBusConnection*, uint32_t);
extern GType g_dbus_connection_get_type();
extern GDBusObject* g_dbus_interface_dup_object(GDBusInterface*);
extern GDBusInterfaceInfo* g_dbus_interface_get_info(GDBusInterface*);
extern void g_dbus_interface_set_object(GDBusInterface*, GDBusObject*);
extern GType g_dbus_interface_get_type();
extern void g_dbus_interface_info_cache_build(GDBusInterfaceInfo*);
extern void g_dbus_interface_info_cache_release(GDBusInterfaceInfo*);
extern void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo*, uint32_t, GString*);
extern GDBusMethodInfo* g_dbus_interface_info_lookup_method(GDBusInterfaceInfo*, char*);
extern GDBusPropertyInfo* g_dbus_interface_info_lookup_property(GDBusInterfaceInfo*, char*);
extern GDBusSignalInfo* g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo*, char*);
extern GDBusInterfaceInfo* g_dbus_interface_info_ref(GDBusInterfaceInfo*);
extern void g_dbus_interface_info_unref(GDBusInterfaceInfo*);
extern int g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton*, GDBusConnection*, char*, GError**);
extern void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton*);
extern GDBusConnection* g_dbus_interface_skeleton_get_connection(GDBusInterfaceSkeleton*);
extern GList* g_dbus_interface_skeleton_get_connections(GDBusInterfaceSkeleton*);
extern GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(GDBusInterfaceSkeleton*);
extern GDBusInterfaceInfo* g_dbus_interface_skeleton_get_info(GDBusInterfaceSkeleton*);
extern char* g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton*);
extern GVariant* g_dbus_interface_skeleton_get_properties(GDBusInterfaceSkeleton*);
extern int g_dbus_interface_skeleton_has_connection(GDBusInterfaceSkeleton*, GDBusConnection*);
extern void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton*, GDBusInterfaceSkeletonFlags);
extern void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton*);
extern void g_dbus_interface_skeleton_unexport_from_connection(GDBusInterfaceSkeleton*, GDBusConnection*);
extern GType g_dbus_interface_skeleton_get_type();
extern GDBusMenuModel* g_dbus_menu_model_get(GDBusConnection*, char*, char*);
extern GType g_dbus_menu_model_get_type();
extern GDBusMessage* g_dbus_message_new();
extern GDBusMessage* g_dbus_message_new_from_blob(uint8_t*, uint64_t, GDBusCapabilityFlags, GError**);
extern GDBusMessage* g_dbus_message_new_method_call(char*, char*, char*, char*);
extern GDBusMessage* g_dbus_message_new_signal(char*, char*, char*);
extern int64_t g_dbus_message_bytes_needed(uint8_t*, uint64_t, GError**);
extern GDBusMessage* g_dbus_message_copy(GDBusMessage*, GError**);
extern char* g_dbus_message_get_arg0(GDBusMessage*);
extern GVariant* g_dbus_message_get_body(GDBusMessage*);
extern GDBusMessageByteOrder g_dbus_message_get_byte_order(GDBusMessage*);
extern char* g_dbus_message_get_destination(GDBusMessage*);
extern char* g_dbus_message_get_error_name(GDBusMessage*);
extern GDBusMessageFlags g_dbus_message_get_flags(GDBusMessage*);
extern GVariant* g_dbus_message_get_header(GDBusMessage*, GDBusMessageHeaderField);
extern uint8_t* g_dbus_message_get_header_fields(GDBusMessage*);
extern char* g_dbus_message_get_interface(GDBusMessage*);
extern int g_dbus_message_get_locked(GDBusMessage*);
extern char* g_dbus_message_get_member(GDBusMessage*);
extern GDBusMessageType g_dbus_message_get_message_type(GDBusMessage*);
extern uint32_t g_dbus_message_get_num_unix_fds(GDBusMessage*);
extern char* g_dbus_message_get_path(GDBusMessage*);
extern uint32_t g_dbus_message_get_reply_serial(GDBusMessage*);
extern char* g_dbus_message_get_sender(GDBusMessage*);
extern uint32_t g_dbus_message_get_serial(GDBusMessage*);
extern char* g_dbus_message_get_signature(GDBusMessage*);
extern GUnixFDList* g_dbus_message_get_unix_fd_list(GDBusMessage*);
extern void g_dbus_message_lock(GDBusMessage*);
extern GDBusMessage* g_dbus_message_new_method_error_literal(GDBusMessage*, char*, char*);
extern GDBusMessage* g_dbus_message_new_method_reply(GDBusMessage*);
extern char* g_dbus_message_print(GDBusMessage*, uint32_t);
extern void g_dbus_message_set_body(GDBusMessage*, GVariant*);
extern void g_dbus_message_set_byte_order(GDBusMessage*, GDBusMessageByteOrder);
extern void g_dbus_message_set_destination(GDBusMessage*, char*);
extern void g_dbus_message_set_error_name(GDBusMessage*, char*);
extern void g_dbus_message_set_flags(GDBusMessage*, GDBusMessageFlags);
extern void g_dbus_message_set_header(GDBusMessage*, GDBusMessageHeaderField, GVariant*);
extern void g_dbus_message_set_interface(GDBusMessage*, char*);
extern void g_dbus_message_set_member(GDBusMessage*, char*);
extern void g_dbus_message_set_message_type(GDBusMessage*, GDBusMessageType);
extern void g_dbus_message_set_num_unix_fds(GDBusMessage*, uint32_t);
extern void g_dbus_message_set_path(GDBusMessage*, char*);
extern void g_dbus_message_set_reply_serial(GDBusMessage*, uint32_t);
extern void g_dbus_message_set_sender(GDBusMessage*, char*);
extern void g_dbus_message_set_serial(GDBusMessage*, uint32_t);
extern void g_dbus_message_set_signature(GDBusMessage*, char*);
extern void g_dbus_message_set_unix_fd_list(GDBusMessage*, GUnixFDList*);
extern uint8_t* g_dbus_message_to_blob(GDBusMessage*, uint64_t*, GDBusCapabilityFlags, GError**);
extern int g_dbus_message_to_gerror(GDBusMessage*, GError**);
extern GType g_dbus_message_get_type();
extern GDBusMethodInfo* g_dbus_method_info_ref(GDBusMethodInfo*);
extern void g_dbus_method_info_unref(GDBusMethodInfo*);
extern GDBusConnection* g_dbus_method_invocation_get_connection(GDBusMethodInvocation*);
extern char* g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation*);
extern GDBusMessage* g_dbus_method_invocation_get_message(GDBusMethodInvocation*);
extern GDBusMethodInfo* g_dbus_method_invocation_get_method_info(GDBusMethodInvocation*);
extern char* g_dbus_method_invocation_get_method_name(GDBusMethodInvocation*);
extern char* g_dbus_method_invocation_get_object_path(GDBusMethodInvocation*);
extern GVariant* g_dbus_method_invocation_get_parameters(GDBusMethodInvocation*);
extern GDBusPropertyInfo* g_dbus_method_invocation_get_property_info(GDBusMethodInvocation*);
extern char* g_dbus_method_invocation_get_sender(GDBusMethodInvocation*);
extern void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation*, char*, char*);
extern void g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation*, uint32_t, int32_t, char*);
extern void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation*, GError*);
extern void g_dbus_method_invocation_return_value(GDBusMethodInvocation*, GVariant*);
extern void g_dbus_method_invocation_return_value_with_unix_fd_list(GDBusMethodInvocation*, GVariant*, GUnixFDList*);
extern GType g_dbus_method_invocation_get_type();
extern GDBusNodeInfo* g_dbus_node_info_new_for_xml(char*, GError**);
extern void g_dbus_node_info_generate_xml(GDBusNodeInfo*, uint32_t, GString*);
extern GDBusInterfaceInfo* g_dbus_node_info_lookup_interface(GDBusNodeInfo*, char*);
extern GDBusNodeInfo* g_dbus_node_info_ref(GDBusNodeInfo*);
extern void g_dbus_node_info_unref(GDBusNodeInfo*);
extern GDBusInterface* g_dbus_object_get_interface(GDBusObject*, char*);
extern GList* g_dbus_object_get_interfaces(GDBusObject*);
extern char* g_dbus_object_get_object_path(GDBusObject*);
extern GType g_dbus_object_get_type();
extern GDBusInterface* g_dbus_object_manager_get_interface(GDBusObjectManager*, char*, char*);
extern GDBusObject* g_dbus_object_manager_get_object(GDBusObjectManager*, char*);
extern char* g_dbus_object_manager_get_object_path(GDBusObjectManager*);
extern GList* g_dbus_object_manager_get_objects(GDBusObjectManager*);
extern GType g_dbus_object_manager_get_type();
extern GDBusObjectManagerClient* g_dbus_object_manager_client_new_finish(GAsyncResult*, GError**);
extern GDBusObjectManagerClient* g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult*, GError**);
extern GDBusObjectManagerClient* g_dbus_object_manager_client_new_for_bus_sync(GBusType, GDBusObjectManagerClientFlags, char*, char*, GDBusProxyTypeFunc, void*, GDestroyNotify, GCancellable*, GError**);
extern GDBusObjectManagerClient* g_dbus_object_manager_client_new_sync(GDBusConnection*, GDBusObjectManagerClientFlags, char*, char*, GDBusProxyTypeFunc, void*, GDestroyNotify, GCancellable*, GError**);
extern void g_dbus_object_manager_client_new(GDBusConnection*, GDBusObjectManagerClientFlags, char*, char*, GDBusProxyTypeFunc, void*, GDestroyNotify, GCancellable*, GAsyncReadyCallback, void*);
extern void g_dbus_object_manager_client_new_for_bus(GBusType, GDBusObjectManagerClientFlags, char*, char*, GDBusProxyTypeFunc, void*, GDestroyNotify, GCancellable*, GAsyncReadyCallback, void*);
extern GDBusConnection* g_dbus_object_manager_client_get_connection(GDBusObjectManagerClient*);
extern GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(GDBusObjectManagerClient*);
extern char* g_dbus_object_manager_client_get_name(GDBusObjectManagerClient*);
extern char* g_dbus_object_manager_client_get_name_owner(GDBusObjectManagerClient*);
extern GType g_dbus_object_manager_client_get_type();
extern GDBusObjectManagerServer* g_dbus_object_manager_server_new(char*);
extern void g_dbus_object_manager_server_export(GDBusObjectManagerServer*, GDBusObjectSkeleton*);
extern void g_dbus_object_manager_server_export_uniquely(GDBusObjectManagerServer*, GDBusObjectSkeleton*);
extern GDBusConnection* g_dbus_object_manager_server_get_connection(GDBusObjectManagerServer*);
extern int g_dbus_object_manager_server_is_exported(GDBusObjectManagerServer*, GDBusObjectSkeleton*);
extern void g_dbus_object_manager_server_set_connection(GDBusObjectManagerServer*, GDBusConnection*);
extern int g_dbus_object_manager_server_unexport(GDBusObjectManagerServer*, char*);
extern GType g_dbus_object_manager_server_get_type();
extern GDBusObjectProxy* g_dbus_object_proxy_new(GDBusConnection*, char*);
extern GDBusConnection* g_dbus_object_proxy_get_connection(GDBusObjectProxy*);
extern GType g_dbus_object_proxy_get_type();
extern GDBusObjectSkeleton* g_dbus_object_skeleton_new(char*);
extern void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton*, GDBusInterfaceSkeleton*);
extern void g_dbus_object_skeleton_flush(GDBusObjectSkeleton*);
extern void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton*, GDBusInterfaceSkeleton*);
extern void g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton*, char*);
extern void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton*, char*);
extern GType g_dbus_object_skeleton_get_type();
extern GDBusPropertyInfo* g_dbus_property_info_ref(GDBusPropertyInfo*);
extern void g_dbus_property_info_unref(GDBusPropertyInfo*);
extern GDBusProxy* g_dbus_proxy_new_finish(GAsyncResult*, GError**);
extern GDBusProxy* g_dbus_proxy_new_for_bus_finish(GAsyncResult*, GError**);
extern GDBusProxy* g_dbus_proxy_new_for_bus_sync(GBusType, GDBusProxyFlags, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, GError**);
extern GDBusProxy* g_dbus_proxy_new_sync(GDBusConnection*, GDBusProxyFlags, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, GError**);
extern void g_dbus_proxy_new(GDBusConnection*, GDBusProxyFlags, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern void g_dbus_proxy_new_for_bus(GBusType, GDBusProxyFlags, GDBusInterfaceInfo*, char*, char*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern void g_dbus_proxy_call(GDBusProxy*, char*, GVariant*, GDBusCallFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern GVariant* g_dbus_proxy_call_finish(GDBusProxy*, GAsyncResult*, GError**);
extern GVariant* g_dbus_proxy_call_sync(GDBusProxy*, char*, GVariant*, GDBusCallFlags, int32_t, GCancellable*, GError**);
extern void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy*, char*, GVariant*, GDBusCallFlags, int32_t, GUnixFDList*, GCancellable*, GAsyncReadyCallback, void*);
extern GVariant* g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy*, GUnixFDList**, GAsyncResult*, GError**);
extern GVariant* g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy*, char*, GVariant*, GDBusCallFlags, int32_t, GUnixFDList*, GUnixFDList**, GCancellable*, GError**);
extern GVariant* g_dbus_proxy_get_cached_property(GDBusProxy*, char*);
extern char** g_dbus_proxy_get_cached_property_names(GDBusProxy*);
extern GDBusConnection* g_dbus_proxy_get_connection(GDBusProxy*);
extern int32_t g_dbus_proxy_get_default_timeout(GDBusProxy*);
extern GDBusProxyFlags g_dbus_proxy_get_flags(GDBusProxy*);
extern GDBusInterfaceInfo* g_dbus_proxy_get_interface_info(GDBusProxy*);
extern char* g_dbus_proxy_get_interface_name(GDBusProxy*);
extern char* g_dbus_proxy_get_name(GDBusProxy*);
extern char* g_dbus_proxy_get_name_owner(GDBusProxy*);
extern char* g_dbus_proxy_get_object_path(GDBusProxy*);
extern void g_dbus_proxy_set_cached_property(GDBusProxy*, char*, GVariant*);
extern void g_dbus_proxy_set_default_timeout(GDBusProxy*, int32_t);
extern void g_dbus_proxy_set_interface_info(GDBusProxy*, GDBusInterfaceInfo*);
extern GType g_dbus_proxy_get_type();
extern GDBusServer* g_dbus_server_new_sync(char*, GDBusServerFlags, char*, GDBusAuthObserver*, GCancellable*, GError**);
extern char* g_dbus_server_get_client_address(GDBusServer*);
extern GDBusServerFlags g_dbus_server_get_flags(GDBusServer*);
extern char* g_dbus_server_get_guid(GDBusServer*);
extern int g_dbus_server_is_active(GDBusServer*);
extern void g_dbus_server_start(GDBusServer*);
extern void g_dbus_server_stop(GDBusServer*);
extern GType g_dbus_server_get_type();
extern GDBusSignalInfo* g_dbus_signal_info_ref(GDBusSignalInfo*);
extern void g_dbus_signal_info_unref(GDBusSignalInfo*);
extern GDataInputStream* g_data_input_stream_new(GInputStream*);
extern GDataStreamByteOrder g_data_input_stream_get_byte_order(GDataInputStream*);
extern GDataStreamNewlineType g_data_input_stream_get_newline_type(GDataInputStream*);
extern uint8_t g_data_input_stream_read_byte(GDataInputStream*, GCancellable*, GError**);
extern int16_t g_data_input_stream_read_int16(GDataInputStream*, GCancellable*, GError**);
extern int32_t g_data_input_stream_read_int32(GDataInputStream*, GCancellable*, GError**);
extern int64_t g_data_input_stream_read_int64(GDataInputStream*, GCancellable*, GError**);
extern uint8_t* g_data_input_stream_read_line(GDataInputStream*, uint64_t*, GCancellable*, GError**);
extern void g_data_input_stream_read_line_async(GDataInputStream*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern uint8_t* g_data_input_stream_read_line_finish(GDataInputStream*, GAsyncResult*, uint64_t*, GError**);
extern char* g_data_input_stream_read_line_finish_utf8(GDataInputStream*, GAsyncResult*, uint64_t*, GError**);
extern char* g_data_input_stream_read_line_utf8(GDataInputStream*, uint64_t*, GCancellable*, GError**);
extern uint16_t g_data_input_stream_read_uint16(GDataInputStream*, GCancellable*, GError**);
extern uint32_t g_data_input_stream_read_uint32(GDataInputStream*, GCancellable*, GError**);
extern uint64_t g_data_input_stream_read_uint64(GDataInputStream*, GCancellable*, GError**);
extern char* g_data_input_stream_read_until(GDataInputStream*, char*, uint64_t*, GCancellable*, GError**);
extern void g_data_input_stream_read_until_async(GDataInputStream*, char*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern char* g_data_input_stream_read_until_finish(GDataInputStream*, GAsyncResult*, uint64_t*, GError**);
extern char* g_data_input_stream_read_upto(GDataInputStream*, char*, int64_t, uint64_t*, GCancellable*, GError**);
extern void g_data_input_stream_read_upto_async(GDataInputStream*, char*, int64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern char* g_data_input_stream_read_upto_finish(GDataInputStream*, GAsyncResult*, uint64_t*, GError**);
extern void g_data_input_stream_set_byte_order(GDataInputStream*, GDataStreamByteOrder);
extern void g_data_input_stream_set_newline_type(GDataInputStream*, GDataStreamNewlineType);
extern GType g_data_input_stream_get_type();
extern GDataOutputStream* g_data_output_stream_new(GOutputStream*);
extern GDataStreamByteOrder g_data_output_stream_get_byte_order(GDataOutputStream*);
extern int g_data_output_stream_put_byte(GDataOutputStream*, uint8_t, GCancellable*, GError**);
extern int g_data_output_stream_put_int16(GDataOutputStream*, int16_t, GCancellable*, GError**);
extern int g_data_output_stream_put_int32(GDataOutputStream*, int32_t, GCancellable*, GError**);
extern int g_data_output_stream_put_int64(GDataOutputStream*, int64_t, GCancellable*, GError**);
extern int g_data_output_stream_put_string(GDataOutputStream*, char*, GCancellable*, GError**);
extern int g_data_output_stream_put_uint16(GDataOutputStream*, uint16_t, GCancellable*, GError**);
extern int g_data_output_stream_put_uint32(GDataOutputStream*, uint32_t, GCancellable*, GError**);
extern int g_data_output_stream_put_uint64(GDataOutputStream*, uint64_t, GCancellable*, GError**);
extern void g_data_output_stream_set_byte_order(GDataOutputStream*, GDataStreamByteOrder);
extern GType g_data_output_stream_get_type();
extern GIOCondition g_datagram_based_condition_check(GDatagramBased*, GIOCondition);
extern int g_datagram_based_condition_wait(GDatagramBased*, GIOCondition, int64_t, GCancellable*, GError**);
extern GSource* g_datagram_based_create_source(GDatagramBased*, GIOCondition, GCancellable*);
extern int32_t g_datagram_based_receive_messages(GDatagramBased*, GInputMessage*, uint32_t, int32_t, int64_t, GCancellable*, GError**);
extern int32_t g_datagram_based_send_messages(GDatagramBased*, GOutputMessage*, uint32_t, int32_t, int64_t, GCancellable*, GError**);
extern GType g_datagram_based_get_type();
extern int g_debug_controller_get_debug_enabled(GDebugController*);
extern void g_debug_controller_set_debug_enabled(GDebugController*, int);
extern GType g_debug_controller_get_type();
extern GDebugControllerDBus* g_debug_controller_dbus_new(GDBusConnection*, GCancellable*, GError**);
extern void g_debug_controller_dbus_stop(GDebugControllerDBus*);
extern GType g_debug_controller_dbus_get_type();
extern GDesktopAppInfo* g_desktop_app_info_new(char*);
extern GDesktopAppInfo* g_desktop_app_info_new_from_filename(char*);
extern GDesktopAppInfo* g_desktop_app_info_new_from_keyfile(GKeyFile*);
extern GList* g_desktop_app_info_get_implementations(char*);
extern char*** g_desktop_app_info_search(char*);
extern void g_desktop_app_info_set_desktop_env(char*);
extern char* g_desktop_app_info_get_action_name(GDesktopAppInfo*, char*);
extern int g_desktop_app_info_get_boolean(GDesktopAppInfo*, char*);
extern char* g_desktop_app_info_get_categories(GDesktopAppInfo*);
extern char* g_desktop_app_info_get_filename(GDesktopAppInfo*);
extern char* g_desktop_app_info_get_generic_name(GDesktopAppInfo*);
extern int g_desktop_app_info_get_is_hidden(GDesktopAppInfo*);
extern char** g_desktop_app_info_get_keywords(GDesktopAppInfo*);
extern char* g_desktop_app_info_get_locale_string(GDesktopAppInfo*, char*);
extern int g_desktop_app_info_get_nodisplay(GDesktopAppInfo*);
extern int g_desktop_app_info_get_show_in(GDesktopAppInfo*, char*);
extern char* g_desktop_app_info_get_startup_wm_class(GDesktopAppInfo*);
extern char* g_desktop_app_info_get_string(GDesktopAppInfo*, char*);
extern char** g_desktop_app_info_get_string_list(GDesktopAppInfo*, char*, uint64_t*);
extern int g_desktop_app_info_has_key(GDesktopAppInfo*, char*);
extern void g_desktop_app_info_launch_action(GDesktopAppInfo*, char*, GAppLaunchContext*);
extern int g_desktop_app_info_launch_uris_as_manager(GDesktopAppInfo*, GList*, GAppLaunchContext*, GSpawnFlags, GSpawnChildSetupFunc, void*, GDesktopAppLaunchCallback, void*, GError**);
extern int g_desktop_app_info_launch_uris_as_manager_with_fds(GDesktopAppInfo*, GList*, GAppLaunchContext*, GSpawnFlags, GSpawnChildSetupFunc, void*, GDesktopAppLaunchCallback, void*, int32_t, int32_t, int32_t, GError**);
extern char** g_desktop_app_info_list_actions(GDesktopAppInfo*);
extern GType g_desktop_app_info_get_type();
extern GAppInfo* g_desktop_app_info_lookup_get_default_for_uri_scheme(GDesktopAppInfoLookup*, char*);
extern GType g_desktop_app_info_lookup_get_type();
extern int g_drive_can_eject(GDrive*);
extern int g_drive_can_poll_for_media(GDrive*);
extern int g_drive_can_start(GDrive*);
extern int g_drive_can_start_degraded(GDrive*);
extern int g_drive_can_stop(GDrive*);
extern void g_drive_eject(GDrive*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_drive_eject(GDrive* this, GMountUnmountFlags arg0, GCancellable* arg1, void* gofunc);
extern int g_drive_eject_finish(GDrive*, GAsyncResult*, GError**);
extern void g_drive_eject_with_operation(GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_drive_eject_with_operation(GDrive* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_drive_eject_with_operation_finish(GDrive*, GAsyncResult*, GError**);
extern char** g_drive_enumerate_identifiers(GDrive*);
extern GIcon* g_drive_get_icon(GDrive*);
extern char* g_drive_get_identifier(GDrive*, char*);
extern char* g_drive_get_name(GDrive*);
extern char* g_drive_get_sort_key(GDrive*);
extern GDriveStartStopType g_drive_get_start_stop_type(GDrive*);
extern GIcon* g_drive_get_symbolic_icon(GDrive*);
extern GList* g_drive_get_volumes(GDrive*);
extern int g_drive_has_media(GDrive*);
extern int g_drive_has_volumes(GDrive*);
extern int g_drive_is_media_check_automatic(GDrive*);
extern int g_drive_is_media_removable(GDrive*);
extern int g_drive_is_removable(GDrive*);
extern void g_drive_poll_for_media(GDrive*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_drive_poll_for_media(GDrive* this, GCancellable* arg0, void* gofunc);
extern int g_drive_poll_for_media_finish(GDrive*, GAsyncResult*, GError**);
extern void g_drive_start(GDrive*, GDriveStartFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_drive_start(GDrive* this, GDriveStartFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_drive_start_finish(GDrive*, GAsyncResult*, GError**);
extern void g_drive_stop(GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_drive_stop(GDrive* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_drive_stop_finish(GDrive*, GAsyncResult*, GError**);
extern GType g_drive_get_type();
extern GDtlsClientConnection* g_dtls_client_connection_new(GDatagramBased*, GSocketConnectable*, GError**);
extern GList* g_dtls_client_connection_get_accepted_cas(GDtlsClientConnection*);
extern GSocketConnectable* g_dtls_client_connection_get_server_identity(GDtlsClientConnection*);
extern GTlsCertificateFlags g_dtls_client_connection_get_validation_flags(GDtlsClientConnection*);
extern void g_dtls_client_connection_set_server_identity(GDtlsClientConnection*, GSocketConnectable*);
extern void g_dtls_client_connection_set_validation_flags(GDtlsClientConnection*, GTlsCertificateFlags);
extern GType g_dtls_client_connection_get_type();
extern int g_dtls_connection_close(GDtlsConnection*, GCancellable*, GError**);
extern void g_dtls_connection_close_async(GDtlsConnection*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern int g_dtls_connection_close_finish(GDtlsConnection*, GAsyncResult*, GError**);
extern int g_dtls_connection_emit_accept_certificate(GDtlsConnection*, GTlsCertificate*, GTlsCertificateFlags);
extern GTlsCertificate* g_dtls_connection_get_certificate(GDtlsConnection*);
extern int g_dtls_connection_get_channel_binding_data(GDtlsConnection*, GTlsChannelBindingType, GByteArray**, GError**);
extern char* g_dtls_connection_get_ciphersuite_name(GDtlsConnection*);
extern GTlsDatabase* g_dtls_connection_get_database(GDtlsConnection*);
extern GTlsInteraction* g_dtls_connection_get_interaction(GDtlsConnection*);
extern char* g_dtls_connection_get_negotiated_protocol(GDtlsConnection*);
extern GTlsCertificate* g_dtls_connection_get_peer_certificate(GDtlsConnection*);
extern GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(GDtlsConnection*);
extern GTlsProtocolVersion g_dtls_connection_get_protocol_version(GDtlsConnection*);
extern GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(GDtlsConnection*);
extern int g_dtls_connection_get_require_close_notify(GDtlsConnection*);
extern int g_dtls_connection_handshake(GDtlsConnection*, GCancellable*, GError**);
extern void g_dtls_connection_handshake_async(GDtlsConnection*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern int g_dtls_connection_handshake_finish(GDtlsConnection*, GAsyncResult*, GError**);
extern void g_dtls_connection_set_advertised_protocols(GDtlsConnection*, char**);
extern void g_dtls_connection_set_certificate(GDtlsConnection*, GTlsCertificate*);
extern void g_dtls_connection_set_database(GDtlsConnection*, GTlsDatabase*);
extern void g_dtls_connection_set_interaction(GDtlsConnection*, GTlsInteraction*);
extern void g_dtls_connection_set_rehandshake_mode(GDtlsConnection*, GTlsRehandshakeMode);
extern void g_dtls_connection_set_require_close_notify(GDtlsConnection*, int);
extern int g_dtls_connection_shutdown(GDtlsConnection*, int, int, GCancellable*, GError**);
extern void g_dtls_connection_shutdown_async(GDtlsConnection*, int, int, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern int g_dtls_connection_shutdown_finish(GDtlsConnection*, GAsyncResult*, GError**);
extern GType g_dtls_connection_get_type();
extern GDtlsServerConnection* g_dtls_server_connection_new(GDatagramBased*, GTlsCertificate*, GError**);
extern GType g_dtls_server_connection_get_type();
extern GEmblem* g_emblem_new(GIcon*);
extern GEmblem* g_emblem_new_with_origin(GIcon*, GEmblemOrigin);
extern GIcon* g_emblem_get_icon(GEmblem*);
extern GEmblemOrigin g_emblem_get_origin(GEmblem*);
extern GType g_emblem_get_type();
extern GEmblemedIcon* g_emblemed_icon_new(GIcon*, GEmblem*);
extern void g_emblemed_icon_add_emblem(GEmblemedIcon*, GEmblem*);
extern void g_emblemed_icon_clear_emblems(GEmblemedIcon*);
extern GList* g_emblemed_icon_get_emblems(GEmblemedIcon*);
extern GIcon* g_emblemed_icon_get_icon(GEmblemedIcon*);
extern GType g_emblemed_icon_get_type();
extern GFile* g_file_new_for_commandline_arg(char*);
extern GFile* g_file_new_for_commandline_arg_and_cwd(char*, char*);
extern GFile* g_file_new_for_path(char*);
extern GFile* g_file_new_for_uri(char*);
extern GFile* g_file_new_tmp(char*, GFileIOStream**, GError**);
extern GFile* g_file_parse_name(char*);
extern GFileOutputStream* g_file_append_to(GFile*, GFileCreateFlags, GCancellable*, GError**);
extern void g_file_append_to_async(GFile*, GFileCreateFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_append_to_async(GFile* this, GFileCreateFlags arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileOutputStream* g_file_append_to_finish(GFile*, GAsyncResult*, GError**);
extern char* g_file_build_attribute_list_for_copy(GFile*, GFileCopyFlags, GCancellable*, GError**);
extern int g_file_copy(GFile*, GFile*, GFileCopyFlags, GCancellable*, GFileProgressCallback, void*, GError**);
extern int _g_file_copy(GFile* this, GFile* arg0, GFileCopyFlags arg1, GCancellable* arg2, void* gofunc, GError** arg5);
extern void g_file_copy_async(GFile*, GFile*, GFileCopyFlags, int32_t, GCancellable*, GFileProgressCallback, void*, GAsyncReadyCallback, void*);
extern int g_file_copy_attributes(GFile*, GFile*, GFileCopyFlags, GCancellable*, GError**);
extern int g_file_copy_finish(GFile*, GAsyncResult*, GError**);
extern GFileOutputStream* g_file_create(GFile*, GFileCreateFlags, GCancellable*, GError**);
extern void g_file_create_async(GFile*, GFileCreateFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_create_async(GFile* this, GFileCreateFlags arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileOutputStream* g_file_create_finish(GFile*, GAsyncResult*, GError**);
extern GFileIOStream* g_file_create_readwrite(GFile*, GFileCreateFlags, GCancellable*, GError**);
extern void g_file_create_readwrite_async(GFile*, GFileCreateFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_create_readwrite_async(GFile* this, GFileCreateFlags arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileIOStream* g_file_create_readwrite_finish(GFile*, GAsyncResult*, GError**);
extern int g_file_delete(GFile*, GCancellable*, GError**);
extern void g_file_delete_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_delete_async(GFile* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_file_delete_finish(GFile*, GAsyncResult*, GError**);
extern GFile* g_file_dup(GFile*);
extern void g_file_eject_mountable(GFile*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_eject_mountable(GFile* this, GMountUnmountFlags arg0, GCancellable* arg1, void* gofunc);
extern int g_file_eject_mountable_finish(GFile*, GAsyncResult*, GError**);
extern void g_file_eject_mountable_with_operation(GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_eject_mountable_with_operation(GFile* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_file_eject_mountable_with_operation_finish(GFile*, GAsyncResult*, GError**);
extern GFileEnumerator* g_file_enumerate_children(GFile*, char*, GFileQueryInfoFlags, GCancellable*, GError**);
extern void g_file_enumerate_children_async(GFile*, char*, GFileQueryInfoFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_enumerate_children_async(GFile* this, char* arg0, GFileQueryInfoFlags arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern GFileEnumerator* g_file_enumerate_children_finish(GFile*, GAsyncResult*, GError**);
extern int g_file_equal(GFile*, GFile*);
extern GMount* g_file_find_enclosing_mount(GFile*, GCancellable*, GError**);
extern void g_file_find_enclosing_mount_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_find_enclosing_mount_async(GFile* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern GMount* g_file_find_enclosing_mount_finish(GFile*, GAsyncResult*, GError**);
extern char* g_file_get_basename(GFile*);
extern GFile* g_file_get_child(GFile*, char*);
extern GFile* g_file_get_child_for_display_name(GFile*, char*, GError**);
extern GFile* g_file_get_parent(GFile*);
extern char* g_file_get_parse_name(GFile*);
extern char* g_file_get_path(GFile*);
extern char* g_file_get_relative_path(GFile*, GFile*);
extern char* g_file_get_uri(GFile*);
extern char* g_file_get_uri_scheme(GFile*);
extern int g_file_has_parent(GFile*, GFile*);
extern int g_file_has_prefix(GFile*, GFile*);
extern int g_file_has_uri_scheme(GFile*, char*);
extern uint32_t g_file_hash(GFile*);
extern int g_file_is_native(GFile*);
extern GBytes* g_file_load_bytes(GFile*, GCancellable*, char**, GError**);
extern void g_file_load_bytes_async(GFile*, GCancellable*, GAsyncReadyCallback, void*);
extern GBytes* g_file_load_bytes_finish(GFile*, GAsyncResult*, char**, GError**);
extern int g_file_load_contents(GFile*, GCancellable*, uint8_t**, uint64_t*, char**, GError**);
extern void g_file_load_contents_async(GFile*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_load_contents_async(GFile* this, GCancellable* arg0, void* gofunc);
extern int g_file_load_contents_finish(GFile*, GAsyncResult*, uint8_t**, uint64_t*, char**, GError**);
extern int g_file_load_partial_contents_finish(GFile*, GAsyncResult*, uint8_t**, uint64_t*, char**, GError**);
extern int g_file_make_directory(GFile*, GCancellable*, GError**);
extern void g_file_make_directory_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_make_directory_async(GFile* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_file_make_directory_finish(GFile*, GAsyncResult*, GError**);
extern int g_file_make_directory_with_parents(GFile*, GCancellable*, GError**);
extern int g_file_make_symbolic_link(GFile*, char*, GCancellable*, GError**);
extern int g_file_measure_disk_usage_finish(GFile*, GAsyncResult*, uint64_t*, uint64_t*, uint64_t*, GError**);
extern GFileMonitor* g_file_monitor(GFile*, GFileMonitorFlags, GCancellable*, GError**);
extern GFileMonitor* g_file_monitor_directory(GFile*, GFileMonitorFlags, GCancellable*, GError**);
extern GFileMonitor* g_file_monitor_file(GFile*, GFileMonitorFlags, GCancellable*, GError**);
extern void g_file_mount_enclosing_volume(GFile*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_mount_enclosing_volume(GFile* this, GMountMountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_file_mount_enclosing_volume_finish(GFile*, GAsyncResult*, GError**);
extern void g_file_mount_mountable(GFile*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_mount_mountable(GFile* this, GMountMountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern GFile* g_file_mount_mountable_finish(GFile*, GAsyncResult*, GError**);
extern int g_file_move(GFile*, GFile*, GFileCopyFlags, GCancellable*, GFileProgressCallback, void*, GError**);
extern int _g_file_move(GFile* this, GFile* arg0, GFileCopyFlags arg1, GCancellable* arg2, void* gofunc, GError** arg5);
extern int g_file_move_finish(GFile*, GAsyncResult*, GError**);
extern GFileIOStream* g_file_open_readwrite(GFile*, GCancellable*, GError**);
extern void g_file_open_readwrite_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_open_readwrite_async(GFile* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern GFileIOStream* g_file_open_readwrite_finish(GFile*, GAsyncResult*, GError**);
extern char* g_file_peek_path(GFile*);
extern void g_file_poll_mountable(GFile*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_poll_mountable(GFile* this, GCancellable* arg0, void* gofunc);
extern int g_file_poll_mountable_finish(GFile*, GAsyncResult*, GError**);
extern GAppInfo* g_file_query_default_handler(GFile*, GCancellable*, GError**);
extern void g_file_query_default_handler_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern GAppInfo* g_file_query_default_handler_finish(GFile*, GAsyncResult*, GError**);
extern int g_file_query_exists(GFile*, GCancellable*);
extern GFileType g_file_query_file_type(GFile*, GFileQueryInfoFlags, GCancellable*);
extern GFileInfo* g_file_query_filesystem_info(GFile*, char*, GCancellable*, GError**);
extern void g_file_query_filesystem_info_async(GFile*, char*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_query_filesystem_info_async(GFile* this, char* arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileInfo* g_file_query_filesystem_info_finish(GFile*, GAsyncResult*, GError**);
extern GFileInfo* g_file_query_info(GFile*, char*, GFileQueryInfoFlags, GCancellable*, GError**);
extern void g_file_query_info_async(GFile*, char*, GFileQueryInfoFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_query_info_async(GFile* this, char* arg0, GFileQueryInfoFlags arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern GFileInfo* g_file_query_info_finish(GFile*, GAsyncResult*, GError**);
extern GFileAttributeInfoList* g_file_query_settable_attributes(GFile*, GCancellable*, GError**);
extern GFileAttributeInfoList* g_file_query_writable_namespaces(GFile*, GCancellable*, GError**);
extern GFileInputStream* g_file_read(GFile*, GCancellable*, GError**);
extern void g_file_read_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_read_async(GFile* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern GFileInputStream* g_file_read_finish(GFile*, GAsyncResult*, GError**);
extern GFileOutputStream* g_file_replace(GFile*, char*, int, GFileCreateFlags, GCancellable*, GError**);
extern void g_file_replace_async(GFile*, char*, int, GFileCreateFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_replace_async(GFile* this, char* arg0, int arg1, GFileCreateFlags arg2, int32_t arg3, GCancellable* arg4, void* gofunc);
extern int g_file_replace_contents(GFile*, uint8_t*, uint64_t, char*, int, GFileCreateFlags, char**, GCancellable*, GError**);
extern void g_file_replace_contents_async(GFile*, uint8_t*, uint64_t, char*, int, GFileCreateFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_replace_contents_async(GFile* this, uint8_t* arg0, uint64_t arg1, char* arg2, int arg3, GFileCreateFlags arg4, GCancellable* arg5, void* gofunc);
extern void g_file_replace_contents_bytes_async(GFile*, GBytes*, char*, int, GFileCreateFlags, GCancellable*, GAsyncReadyCallback, void*);
extern int g_file_replace_contents_finish(GFile*, GAsyncResult*, char**, GError**);
extern GFileOutputStream* g_file_replace_finish(GFile*, GAsyncResult*, GError**);
extern GFileIOStream* g_file_replace_readwrite(GFile*, char*, int, GFileCreateFlags, GCancellable*, GError**);
extern void g_file_replace_readwrite_async(GFile*, char*, int, GFileCreateFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_replace_readwrite_async(GFile* this, char* arg0, int arg1, GFileCreateFlags arg2, int32_t arg3, GCancellable* arg4, void* gofunc);
extern GFileIOStream* g_file_replace_readwrite_finish(GFile*, GAsyncResult*, GError**);
extern GFile* g_file_resolve_relative_path(GFile*, char*);
extern int g_file_set_attribute(GFile*, char*, GFileAttributeType, void*, GFileQueryInfoFlags, GCancellable*, GError**);
extern int g_file_set_attribute_byte_string(GFile*, char*, char*, GFileQueryInfoFlags, GCancellable*, GError**);
extern int g_file_set_attribute_int32(GFile*, char*, int32_t, GFileQueryInfoFlags, GCancellable*, GError**);
extern int g_file_set_attribute_int64(GFile*, char*, int64_t, GFileQueryInfoFlags, GCancellable*, GError**);
extern int g_file_set_attribute_string(GFile*, char*, char*, GFileQueryInfoFlags, GCancellable*, GError**);
extern int g_file_set_attribute_uint32(GFile*, char*, uint32_t, GFileQueryInfoFlags, GCancellable*, GError**);
extern int g_file_set_attribute_uint64(GFile*, char*, uint64_t, GFileQueryInfoFlags, GCancellable*, GError**);
extern void g_file_set_attributes_async(GFile*, GFileInfo*, GFileQueryInfoFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_set_attributes_async(GFile* this, GFileInfo* arg0, GFileQueryInfoFlags arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int g_file_set_attributes_finish(GFile*, GAsyncResult*, GFileInfo**, GError**);
extern int g_file_set_attributes_from_info(GFile*, GFileInfo*, GFileQueryInfoFlags, GCancellable*, GError**);
extern GFile* g_file_set_display_name(GFile*, char*, GCancellable*, GError**);
extern void g_file_set_display_name_async(GFile*, char*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_set_display_name_async(GFile* this, char* arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFile* g_file_set_display_name_finish(GFile*, GAsyncResult*, GError**);
extern void g_file_start_mountable(GFile*, GDriveStartFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_start_mountable(GFile* this, GDriveStartFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_file_start_mountable_finish(GFile*, GAsyncResult*, GError**);
extern void g_file_stop_mountable(GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_stop_mountable(GFile* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_file_stop_mountable_finish(GFile*, GAsyncResult*, GError**);
extern int g_file_supports_thread_contexts(GFile*);
extern int g_file_trash(GFile*, GCancellable*, GError**);
extern void g_file_trash_async(GFile*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_trash_async(GFile* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_file_trash_finish(GFile*, GAsyncResult*, GError**);
extern void g_file_unmount_mountable(GFile*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_unmount_mountable(GFile* this, GMountUnmountFlags arg0, GCancellable* arg1, void* gofunc);
extern int g_file_unmount_mountable_finish(GFile*, GAsyncResult*, GError**);
extern void g_file_unmount_mountable_with_operation(GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_unmount_mountable_with_operation(GFile* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_file_unmount_mountable_with_operation_finish(GFile*, GAsyncResult*, GError**);
extern GType g_file_get_type();
extern GFileAttributeInfoList* g_file_attribute_info_list_new();
extern void g_file_attribute_info_list_add(GFileAttributeInfoList*, char*, GFileAttributeType, GFileAttributeInfoFlags);
extern GFileAttributeInfoList* g_file_attribute_info_list_dup(GFileAttributeInfoList*);
extern GFileAttributeInfo* g_file_attribute_info_list_lookup(GFileAttributeInfoList*, char*);
extern GFileAttributeInfoList* g_file_attribute_info_list_ref(GFileAttributeInfoList*);
extern void g_file_attribute_info_list_unref(GFileAttributeInfoList*);
extern GFileAttributeMatcher* g_file_attribute_matcher_new(char*);
extern int g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher*, char*);
extern char* g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher*);
extern int g_file_attribute_matcher_matches(GFileAttributeMatcher*, char*);
extern int g_file_attribute_matcher_matches_only(GFileAttributeMatcher*, char*);
extern GFileAttributeMatcher* g_file_attribute_matcher_ref(GFileAttributeMatcher*);
extern GFileAttributeMatcher* g_file_attribute_matcher_subtract(GFileAttributeMatcher*, GFileAttributeMatcher*);
extern char* g_file_attribute_matcher_to_string(GFileAttributeMatcher*);
extern void g_file_attribute_matcher_unref(GFileAttributeMatcher*);
extern int32_t g_file_descriptor_based_get_fd(GFileDescriptorBased*);
extern GType g_file_descriptor_based_get_type();
extern int g_file_enumerator_close(GFileEnumerator*, GCancellable*, GError**);
extern void g_file_enumerator_close_async(GFileEnumerator*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_enumerator_close_async(GFileEnumerator* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_file_enumerator_close_finish(GFileEnumerator*, GAsyncResult*, GError**);
extern GFile* g_file_enumerator_get_child(GFileEnumerator*, GFileInfo*);
extern GFile* g_file_enumerator_get_container(GFileEnumerator*);
extern int g_file_enumerator_has_pending(GFileEnumerator*);
extern int g_file_enumerator_is_closed(GFileEnumerator*);
extern int g_file_enumerator_iterate(GFileEnumerator*, GFileInfo**, GFile**, GCancellable*, GError**);
extern GFileInfo* g_file_enumerator_next_file(GFileEnumerator*, GCancellable*, GError**);
extern void g_file_enumerator_next_files_async(GFileEnumerator*, int32_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_enumerator_next_files_async(GFileEnumerator* this, int32_t arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GList* g_file_enumerator_next_files_finish(GFileEnumerator*, GAsyncResult*, GError**);
extern void g_file_enumerator_set_pending(GFileEnumerator*, int);
extern GType g_file_enumerator_get_type();
extern char* g_file_io_stream_get_etag(GFileIOStream*);
extern GFileInfo* g_file_io_stream_query_info(GFileIOStream*, char*, GCancellable*, GError**);
extern void g_file_io_stream_query_info_async(GFileIOStream*, char*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_io_stream_query_info_async(GFileIOStream* this, char* arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileInfo* g_file_io_stream_query_info_finish(GFileIOStream*, GAsyncResult*, GError**);
extern GType g_file_io_stream_get_type();
extern GFileIcon* g_file_icon_new(GFile*);
extern GFile* g_file_icon_get_file(GFileIcon*);
extern GType g_file_icon_get_type();
extern GFileInfo* g_file_info_new();
extern void g_file_info_clear_status(GFileInfo*);
extern void g_file_info_copy_into(GFileInfo*, GFileInfo*);
extern GFileInfo* g_file_info_dup(GFileInfo*);
extern GDateTime* g_file_info_get_access_date_time(GFileInfo*);
extern char* g_file_info_get_attribute_as_string(GFileInfo*, char*);
extern int g_file_info_get_attribute_boolean(GFileInfo*, char*);
extern char* g_file_info_get_attribute_byte_string(GFileInfo*, char*);
extern int g_file_info_get_attribute_data(GFileInfo*, char*, GFileAttributeType*, void**, GFileAttributeStatus*);
extern int32_t g_file_info_get_attribute_int32(GFileInfo*, char*);
extern int64_t g_file_info_get_attribute_int64(GFileInfo*, char*);
extern GObject* g_file_info_get_attribute_object(GFileInfo*, char*);
extern GFileAttributeStatus g_file_info_get_attribute_status(GFileInfo*, char*);
extern char* g_file_info_get_attribute_string(GFileInfo*, char*);
extern char** g_file_info_get_attribute_stringv(GFileInfo*, char*);
extern GFileAttributeType g_file_info_get_attribute_type(GFileInfo*, char*);
extern uint32_t g_file_info_get_attribute_uint32(GFileInfo*, char*);
extern uint64_t g_file_info_get_attribute_uint64(GFileInfo*, char*);
extern char* g_file_info_get_content_type(GFileInfo*);
extern GDateTime* g_file_info_get_creation_date_time(GFileInfo*);
extern GDateTime* g_file_info_get_deletion_date(GFileInfo*);
extern char* g_file_info_get_display_name(GFileInfo*);
extern char* g_file_info_get_edit_name(GFileInfo*);
extern char* g_file_info_get_etag(GFileInfo*);
extern GFileType g_file_info_get_file_type(GFileInfo*);
extern GIcon* g_file_info_get_icon(GFileInfo*);
extern int g_file_info_get_is_backup(GFileInfo*);
extern int g_file_info_get_is_hidden(GFileInfo*);
extern int g_file_info_get_is_symlink(GFileInfo*);
extern GDateTime* g_file_info_get_modification_date_time(GFileInfo*);
extern void g_file_info_get_modification_time(GFileInfo*, GTimeVal*);
extern char* g_file_info_get_name(GFileInfo*);
extern int64_t g_file_info_get_size(GFileInfo*);
extern int32_t g_file_info_get_sort_order(GFileInfo*);
extern GIcon* g_file_info_get_symbolic_icon(GFileInfo*);
extern char* g_file_info_get_symlink_target(GFileInfo*);
extern int g_file_info_has_attribute(GFileInfo*, char*);
extern int g_file_info_has_namespace(GFileInfo*, char*);
extern char** g_file_info_list_attributes(GFileInfo*, char*);
extern void g_file_info_remove_attribute(GFileInfo*, char*);
extern void g_file_info_set_access_date_time(GFileInfo*, GDateTime*);
extern void g_file_info_set_attribute(GFileInfo*, char*, GFileAttributeType, void*);
extern void g_file_info_set_attribute_boolean(GFileInfo*, char*, int);
extern void g_file_info_set_attribute_byte_string(GFileInfo*, char*, char*);
extern void g_file_info_set_attribute_int32(GFileInfo*, char*, int32_t);
extern void g_file_info_set_attribute_int64(GFileInfo*, char*, int64_t);
extern void g_file_info_set_attribute_mask(GFileInfo*, GFileAttributeMatcher*);
extern void g_file_info_set_attribute_object(GFileInfo*, char*, GObject*);
extern int g_file_info_set_attribute_status(GFileInfo*, char*, GFileAttributeStatus);
extern void g_file_info_set_attribute_string(GFileInfo*, char*, char*);
extern void g_file_info_set_attribute_stringv(GFileInfo*, char*, char**);
extern void g_file_info_set_attribute_uint32(GFileInfo*, char*, uint32_t);
extern void g_file_info_set_attribute_uint64(GFileInfo*, char*, uint64_t);
extern void g_file_info_set_content_type(GFileInfo*, char*);
extern void g_file_info_set_creation_date_time(GFileInfo*, GDateTime*);
extern void g_file_info_set_display_name(GFileInfo*, char*);
extern void g_file_info_set_edit_name(GFileInfo*, char*);
extern void g_file_info_set_file_type(GFileInfo*, GFileType);
extern void g_file_info_set_icon(GFileInfo*, GIcon*);
extern void g_file_info_set_is_hidden(GFileInfo*, int);
extern void g_file_info_set_is_symlink(GFileInfo*, int);
extern void g_file_info_set_modification_date_time(GFileInfo*, GDateTime*);
extern void g_file_info_set_modification_time(GFileInfo*, GTimeVal*);
extern void g_file_info_set_name(GFileInfo*, char*);
extern void g_file_info_set_size(GFileInfo*, int64_t);
extern void g_file_info_set_sort_order(GFileInfo*, int32_t);
extern void g_file_info_set_symbolic_icon(GFileInfo*, GIcon*);
extern void g_file_info_set_symlink_target(GFileInfo*, char*);
extern void g_file_info_unset_attribute_mask(GFileInfo*);
extern GType g_file_info_get_type();
extern GFileInfo* g_file_input_stream_query_info(GFileInputStream*, char*, GCancellable*, GError**);
extern void g_file_input_stream_query_info_async(GFileInputStream*, char*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_input_stream_query_info_async(GFileInputStream* this, char* arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileInfo* g_file_input_stream_query_info_finish(GFileInputStream*, GAsyncResult*, GError**);
extern GType g_file_input_stream_get_type();
extern int g_file_monitor_cancel(GFileMonitor*);
extern void g_file_monitor_emit_event(GFileMonitor*, GFile*, GFile*, GFileMonitorEvent);
extern int g_file_monitor_is_cancelled(GFileMonitor*);
extern void g_file_monitor_set_rate_limit(GFileMonitor*, int32_t);
extern GType g_file_monitor_get_type();
extern char* g_file_output_stream_get_etag(GFileOutputStream*);
extern GFileInfo* g_file_output_stream_query_info(GFileOutputStream*, char*, GCancellable*, GError**);
extern void g_file_output_stream_query_info_async(GFileOutputStream*, char*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_file_output_stream_query_info_async(GFileOutputStream* this, char* arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GFileInfo* g_file_output_stream_query_info_finish(GFileOutputStream*, GAsyncResult*, GError**);
extern GType g_file_output_stream_get_type();
extern GFilenameCompleter* g_filename_completer_new();
extern char* g_filename_completer_get_completion_suffix(GFilenameCompleter*, char*);
extern char** g_filename_completer_get_completions(GFilenameCompleter*, char*);
extern void g_filename_completer_set_dirs_only(GFilenameCompleter*, int);
extern GType g_filename_completer_get_type();
extern GInputStream* g_filter_input_stream_get_base_stream(GFilterInputStream*);
extern int g_filter_input_stream_get_close_base_stream(GFilterInputStream*);
extern void g_filter_input_stream_set_close_base_stream(GFilterInputStream*, int);
extern GType g_filter_input_stream_get_type();
extern GOutputStream* g_filter_output_stream_get_base_stream(GFilterOutputStream*);
extern int g_filter_output_stream_get_close_base_stream(GFilterOutputStream*);
extern void g_filter_output_stream_set_close_base_stream(GFilterOutputStream*, int);
extern GType g_filter_output_stream_get_type();
extern char* g_io_extension_get_name(GIOExtension*);
extern int32_t g_io_extension_get_priority(GIOExtension*);
extern GType g_io_extension_get_type(GIOExtension*);
extern GIOExtension* g_io_extension_point_get_extension_by_name(GIOExtensionPoint*, char*);
extern GList* g_io_extension_point_get_extensions(GIOExtensionPoint*);
extern GType g_io_extension_point_get_required_type(GIOExtensionPoint*);
extern void g_io_extension_point_set_required_type(GIOExtensionPoint*, GType);
extern GIOExtension* g_io_extension_point_implement(char*, GType, char*, int32_t);
extern GIOExtensionPoint* g_io_extension_point_lookup(char*);
extern GIOExtensionPoint* g_io_extension_point_register(char*);
extern GIOModule* g_io_module_new(char*);
extern char** g_io_module_query();
extern GType g_io_module_get_type();
extern void g_io_module_scope_block(GIOModuleScope*, char*);
extern void g_io_module_scope_free(GIOModuleScope*);
extern int g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob*, GSourceFunc, void*, GDestroyNotify);
extern void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob*, GSourceFunc, void*, GDestroyNotify);
extern int g_io_stream_splice_finish(GAsyncResult*, GError**);
extern void g_io_stream_clear_pending(GIOStream*);
extern int g_io_stream_close(GIOStream*, GCancellable*, GError**);
extern void g_io_stream_close_async(GIOStream*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_io_stream_close_async(GIOStream* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_io_stream_close_finish(GIOStream*, GAsyncResult*, GError**);
extern GInputStream* g_io_stream_get_input_stream(GIOStream*);
extern GOutputStream* g_io_stream_get_output_stream(GIOStream*);
extern int g_io_stream_has_pending(GIOStream*);
extern int g_io_stream_is_closed(GIOStream*);
extern int g_io_stream_set_pending(GIOStream*, GError**);
extern void g_io_stream_splice_async(GIOStream*, GIOStream*, GIOStreamSpliceFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_io_stream_splice_async(GIOStream* this, GIOStream* arg0, GIOStreamSpliceFlags arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern GType g_io_stream_get_type();
extern GIcon* g_icon_deserialize(GVariant*);
extern uint32_t g_icon_hash(void*);
extern GIcon* g_icon_new_for_string(char*, GError**);
extern int g_icon_equal(GIcon*, GIcon*);
extern GVariant* g_icon_serialize(GIcon*);
extern char* g_icon_to_string(GIcon*);
extern GType g_icon_get_type();
extern GInetAddress* g_inet_address_new_any(GSocketFamily);
extern GInetAddress* g_inet_address_new_from_bytes(uint8_t*, GSocketFamily);
extern GInetAddress* g_inet_address_new_from_string(char*);
extern GInetAddress* g_inet_address_new_loopback(GSocketFamily);
extern int g_inet_address_equal(GInetAddress*, GInetAddress*);
extern GSocketFamily g_inet_address_get_family(GInetAddress*);
extern int g_inet_address_get_is_any(GInetAddress*);
extern int g_inet_address_get_is_link_local(GInetAddress*);
extern int g_inet_address_get_is_loopback(GInetAddress*);
extern int g_inet_address_get_is_mc_global(GInetAddress*);
extern int g_inet_address_get_is_mc_link_local(GInetAddress*);
extern int g_inet_address_get_is_mc_node_local(GInetAddress*);
extern int g_inet_address_get_is_mc_org_local(GInetAddress*);
extern int g_inet_address_get_is_mc_site_local(GInetAddress*);
extern int g_inet_address_get_is_multicast(GInetAddress*);
extern int g_inet_address_get_is_site_local(GInetAddress*);
extern uint64_t g_inet_address_get_native_size(GInetAddress*);
extern char* g_inet_address_to_string(GInetAddress*);
extern GType g_inet_address_get_type();
extern GInetAddressMask* g_inet_address_mask_new(GInetAddress*, uint32_t, GError**);
extern GInetAddressMask* g_inet_address_mask_new_from_string(char*, GError**);
extern int g_inet_address_mask_equal(GInetAddressMask*, GInetAddressMask*);
extern GInetAddress* g_inet_address_mask_get_address(GInetAddressMask*);
extern GSocketFamily g_inet_address_mask_get_family(GInetAddressMask*);
extern uint32_t g_inet_address_mask_get_length(GInetAddressMask*);
extern int g_inet_address_mask_matches(GInetAddressMask*, GInetAddress*);
extern char* g_inet_address_mask_to_string(GInetAddressMask*);
extern GType g_inet_address_mask_get_type();
extern GSocketAddress* g_inet_socket_address_new(GInetAddress*, uint16_t);
extern GSocketAddress* g_inet_socket_address_new_from_string(char*, uint32_t);
extern GInetAddress* g_inet_socket_address_get_address(GInetSocketAddress*);
extern uint32_t g_inet_socket_address_get_flowinfo(GInetSocketAddress*);
extern uint16_t g_inet_socket_address_get_port(GInetSocketAddress*);
extern uint32_t g_inet_socket_address_get_scope_id(GInetSocketAddress*);
extern GType g_inet_socket_address_get_type();
extern GObject* g_initable_newv(GType, uint32_t, GParameter*, GCancellable*, GError**);
extern int g_initable_init(GInitable*, GCancellable*, GError**);
extern GType g_initable_get_type();
extern void g_input_stream_clear_pending(GInputStream*);
extern int g_input_stream_close(GInputStream*, GCancellable*, GError**);
extern void g_input_stream_close_async(GInputStream*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_input_stream_close_async(GInputStream* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_input_stream_close_finish(GInputStream*, GAsyncResult*, GError**);
extern int g_input_stream_has_pending(GInputStream*);
extern int g_input_stream_is_closed(GInputStream*);
extern int64_t g_input_stream_read(GInputStream*, uint8_t**, uint64_t, GCancellable*, GError**);
extern int g_input_stream_read_all(GInputStream*, uint8_t**, uint64_t, uint64_t*, GCancellable*, GError**);
extern void g_input_stream_read_all_async(GInputStream*, uint8_t**, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_input_stream_read_all_async(GInputStream* this, uint8_t** arg0, uint64_t arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int g_input_stream_read_all_finish(GInputStream*, GAsyncResult*, uint64_t*, GError**);
extern void g_input_stream_read_async(GInputStream*, uint8_t**, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_input_stream_read_async(GInputStream* this, uint8_t** arg0, uint64_t arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern GBytes* g_input_stream_read_bytes(GInputStream*, uint64_t, GCancellable*, GError**);
extern void g_input_stream_read_bytes_async(GInputStream*, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_input_stream_read_bytes_async(GInputStream* this, uint64_t arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern GBytes* g_input_stream_read_bytes_finish(GInputStream*, GAsyncResult*, GError**);
extern int64_t g_input_stream_read_finish(GInputStream*, GAsyncResult*, GError**);
extern int g_input_stream_set_pending(GInputStream*, GError**);
extern int64_t g_input_stream_skip(GInputStream*, uint64_t, GCancellable*, GError**);
extern void g_input_stream_skip_async(GInputStream*, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_input_stream_skip_async(GInputStream* this, uint64_t arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern int64_t g_input_stream_skip_finish(GInputStream*, GAsyncResult*, GError**);
extern GType g_input_stream_get_type();
extern GType g_list_model_get_item_type(GListModel*);
extern uint32_t g_list_model_get_n_items(GListModel*);
extern GObject* g_list_model_get_object(GListModel*, uint32_t);
extern void g_list_model_items_changed(GListModel*, uint32_t, uint32_t, uint32_t);
extern GType g_list_model_get_type();
extern GListStore* g_list_store_new(GType);
extern void g_list_store_append(GListStore*, GObject*);
extern int g_list_store_find(GListStore*, GObject*, uint32_t*);
extern int g_list_store_find_with_equal_func(GListStore*, GObject*, GEqualFunc, uint32_t*);
extern void g_list_store_insert(GListStore*, uint32_t, GObject*);
extern uint32_t g_list_store_insert_sorted(GListStore*, GObject*, GCompareDataFunc, void*);
extern void g_list_store_remove(GListStore*, uint32_t);
extern void g_list_store_remove_all(GListStore*);
extern void g_list_store_sort(GListStore*, GCompareDataFunc, void*);
extern void g_list_store_splice(GListStore*, uint32_t, uint32_t, GObject*, uint32_t);
extern GType g_list_store_get_type();
extern GInputStream* g_loadable_icon_load(GLoadableIcon*, int32_t, char**, GCancellable*, GError**);
extern void g_loadable_icon_load_async(GLoadableIcon*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern GInputStream* g_loadable_icon_load_finish(GLoadableIcon*, GAsyncResult*, char**, GError**);
extern GType g_loadable_icon_get_type();
extern GInputStream* g_memory_input_stream_new();
extern GInputStream* g_memory_input_stream_new_from_bytes(GBytes*);
extern GInputStream* g_memory_input_stream_new_from_data(uint8_t*, int64_t, GDestroyNotify);
extern void g_memory_input_stream_add_bytes(GMemoryInputStream*, GBytes*);
extern void g_memory_input_stream_add_data(GMemoryInputStream*, uint8_t*, int64_t, GDestroyNotify);
extern GType g_memory_input_stream_get_type();
extern GMemoryMonitor* g_memory_monitor_dup_default();
extern GType g_memory_monitor_get_type();
extern GOutputStream* g_memory_output_stream_new_resizable();
extern void* g_memory_output_stream_get_data(GMemoryOutputStream*);
extern uint64_t g_memory_output_stream_get_data_size(GMemoryOutputStream*);
extern uint64_t g_memory_output_stream_get_size(GMemoryOutputStream*);
extern GBytes* g_memory_output_stream_steal_as_bytes(GMemoryOutputStream*);
extern void* g_memory_output_stream_steal_data(GMemoryOutputStream*);
extern GType g_memory_output_stream_get_type();
extern GMenu* g_menu_new();
extern void g_menu_append(GMenu*, char*, char*);
extern void g_menu_append_item(GMenu*, GMenuItem*);
extern void g_menu_append_section(GMenu*, char*, GMenuModel*);
extern void g_menu_append_submenu(GMenu*, char*, GMenuModel*);
extern void g_menu_freeze(GMenu*);
extern void g_menu_insert(GMenu*, int32_t, char*, char*);
extern void g_menu_insert_item(GMenu*, int32_t, GMenuItem*);
extern void g_menu_insert_section(GMenu*, int32_t, char*, GMenuModel*);
extern void g_menu_insert_submenu(GMenu*, int32_t, char*, GMenuModel*);
extern void g_menu_prepend(GMenu*, char*, char*);
extern void g_menu_prepend_item(GMenu*, GMenuItem*);
extern void g_menu_prepend_section(GMenu*, char*, GMenuModel*);
extern void g_menu_prepend_submenu(GMenu*, char*, GMenuModel*);
extern void g_menu_remove(GMenu*, int32_t);
extern void g_menu_remove_all(GMenu*);
extern GType g_menu_get_type();
extern char* g_menu_attribute_iter_get_name(GMenuAttributeIter*);
extern int g_menu_attribute_iter_get_next(GMenuAttributeIter*, char**, GVariant**);
extern GVariant* g_menu_attribute_iter_get_value(GMenuAttributeIter*);
extern int g_menu_attribute_iter_next(GMenuAttributeIter*);
extern GType g_menu_attribute_iter_get_type();
extern GMenuItem* g_menu_item_new(char*, char*);
extern GMenuItem* g_menu_item_new_from_model(GMenuModel*, int32_t);
extern GMenuItem* g_menu_item_new_section(char*, GMenuModel*);
extern GMenuItem* g_menu_item_new_submenu(char*, GMenuModel*);
extern GVariant* g_menu_item_get_attribute_value(GMenuItem*, char*, GVariantType*);
extern GMenuModel* g_menu_item_get_link(GMenuItem*, char*);
extern void g_menu_item_set_action_and_target_value(GMenuItem*, char*, GVariant*);
extern void g_menu_item_set_attribute_value(GMenuItem*, char*, GVariant*);
extern void g_menu_item_set_detailed_action(GMenuItem*, char*);
extern void g_menu_item_set_icon(GMenuItem*, GIcon*);
extern void g_menu_item_set_label(GMenuItem*, char*);
extern void g_menu_item_set_link(GMenuItem*, char*, GMenuModel*);
extern void g_menu_item_set_section(GMenuItem*, GMenuModel*);
extern void g_menu_item_set_submenu(GMenuItem*, GMenuModel*);
extern GType g_menu_item_get_type();
extern char* g_menu_link_iter_get_name(GMenuLinkIter*);
extern int g_menu_link_iter_get_next(GMenuLinkIter*, char**, GMenuModel**);
extern GMenuModel* g_menu_link_iter_get_value(GMenuLinkIter*);
extern int g_menu_link_iter_next(GMenuLinkIter*);
extern GType g_menu_link_iter_get_type();
extern GVariant* g_menu_model_get_item_attribute_value(GMenuModel*, int32_t, char*, GVariantType*);
extern GMenuModel* g_menu_model_get_item_link(GMenuModel*, int32_t, char*);
extern int32_t g_menu_model_get_n_items(GMenuModel*);
extern int g_menu_model_is_mutable(GMenuModel*);
extern void g_menu_model_items_changed(GMenuModel*, int32_t, int32_t, int32_t);
extern GMenuAttributeIter* g_menu_model_iterate_item_attributes(GMenuModel*, int32_t);
extern GMenuLinkIter* g_menu_model_iterate_item_links(GMenuModel*, int32_t);
extern GType g_menu_model_get_type();
extern int g_mount_can_eject(GMount*);
extern int g_mount_can_unmount(GMount*);
extern void g_mount_eject(GMount*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_mount_eject(GMount* this, GMountUnmountFlags arg0, GCancellable* arg1, void* gofunc);
extern int g_mount_eject_finish(GMount*, GAsyncResult*, GError**);
extern void g_mount_eject_with_operation(GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_mount_eject_with_operation(GMount* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_mount_eject_with_operation_finish(GMount*, GAsyncResult*, GError**);
extern GFile* g_mount_get_default_location(GMount*);
extern GDrive* g_mount_get_drive(GMount*);
extern GIcon* g_mount_get_icon(GMount*);
extern char* g_mount_get_name(GMount*);
extern GFile* g_mount_get_root(GMount*);
extern char* g_mount_get_sort_key(GMount*);
extern GIcon* g_mount_get_symbolic_icon(GMount*);
extern char* g_mount_get_uuid(GMount*);
extern GVolume* g_mount_get_volume(GMount*);
extern void g_mount_guess_content_type(GMount*, int, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_mount_guess_content_type(GMount* this, int arg0, GCancellable* arg1, void* gofunc);
extern char** g_mount_guess_content_type_finish(GMount*, GAsyncResult*, GError**);
extern char** g_mount_guess_content_type_sync(GMount*, int, GCancellable*, GError**);
extern int g_mount_is_shadowed(GMount*);
extern void g_mount_remount(GMount*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_mount_remount(GMount* this, GMountMountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_mount_remount_finish(GMount*, GAsyncResult*, GError**);
extern void g_mount_shadow(GMount*);
extern void g_mount_unmount(GMount*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_mount_unmount(GMount* this, GMountUnmountFlags arg0, GCancellable* arg1, void* gofunc);
extern int g_mount_unmount_finish(GMount*, GAsyncResult*, GError**);
extern void g_mount_unmount_with_operation(GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_mount_unmount_with_operation(GMount* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_mount_unmount_with_operation_finish(GMount*, GAsyncResult*, GError**);
extern void g_mount_unshadow(GMount*);
extern GType g_mount_get_type();
extern GMountOperation* g_mount_operation_new();
extern int g_mount_operation_get_anonymous(GMountOperation*);
extern int32_t g_mount_operation_get_choice(GMountOperation*);
extern char* g_mount_operation_get_domain(GMountOperation*);
extern int g_mount_operation_get_is_tcrypt_hidden_volume(GMountOperation*);
extern int g_mount_operation_get_is_tcrypt_system_volume(GMountOperation*);
extern char* g_mount_operation_get_password(GMountOperation*);
extern GPasswordSave g_mount_operation_get_password_save(GMountOperation*);
extern uint32_t g_mount_operation_get_pim(GMountOperation*);
extern char* g_mount_operation_get_username(GMountOperation*);
extern void g_mount_operation_reply(GMountOperation*, GMountOperationResult);
extern void g_mount_operation_set_anonymous(GMountOperation*, int);
extern void g_mount_operation_set_choice(GMountOperation*, int32_t);
extern void g_mount_operation_set_domain(GMountOperation*, char*);
extern void g_mount_operation_set_is_tcrypt_hidden_volume(GMountOperation*, int);
extern void g_mount_operation_set_is_tcrypt_system_volume(GMountOperation*, int);
extern void g_mount_operation_set_password(GMountOperation*, char*);
extern void g_mount_operation_set_password_save(GMountOperation*, GPasswordSave);
extern void g_mount_operation_set_pim(GMountOperation*, uint32_t);
extern void g_mount_operation_set_username(GMountOperation*, char*);
extern GType g_mount_operation_get_type();
extern GSocketAddress* g_native_socket_address_new(void*, uint64_t);
extern GType g_native_socket_address_get_type();
extern GType g_native_volume_monitor_get_type();
extern GNetworkAddress* g_network_address_new(char*, uint16_t);
extern GNetworkAddress* g_network_address_new_loopback(uint16_t);
extern GNetworkAddress* g_network_address_parse(char*, uint16_t, GError**);
extern GNetworkAddress* g_network_address_parse_uri(char*, uint16_t, GError**);
extern char* g_network_address_get_hostname(GNetworkAddress*);
extern uint16_t g_network_address_get_port(GNetworkAddress*);
extern char* g_network_address_get_scheme(GNetworkAddress*);
extern GType g_network_address_get_type();
extern GNetworkMonitor* g_network_monitor_get_default();
extern int g_network_monitor_can_reach(GNetworkMonitor*, GSocketConnectable*, GCancellable*, GError**);
extern void g_network_monitor_can_reach_async(GNetworkMonitor*, GSocketConnectable*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_network_monitor_can_reach_finish(GNetworkMonitor*, GAsyncResult*, GError**);
extern GNetworkConnectivity g_network_monitor_get_connectivity(GNetworkMonitor*);
extern int g_network_monitor_get_network_available(GNetworkMonitor*);
extern int g_network_monitor_get_network_metered(GNetworkMonitor*);
extern GType g_network_monitor_get_type();
extern GNetworkService* g_network_service_new(char*, char*, char*);
extern char* g_network_service_get_domain(GNetworkService*);
extern char* g_network_service_get_protocol(GNetworkService*);
extern char* g_network_service_get_scheme(GNetworkService*);
extern char* g_network_service_get_service(GNetworkService*);
extern void g_network_service_set_scheme(GNetworkService*, char*);
extern GType g_network_service_get_type();
extern GNotification* g_notification_new(char*);
extern void g_notification_add_button(GNotification*, char*, char*);
extern void g_notification_add_button_with_target_value(GNotification*, char*, char*, GVariant*);
extern void g_notification_set_body(GNotification*, char*);
extern void g_notification_set_category(GNotification*, char*);
extern void g_notification_set_default_action(GNotification*, char*);
extern void g_notification_set_default_action_and_target_value(GNotification*, char*, GVariant*);
extern void g_notification_set_icon(GNotification*, GIcon*);
extern void g_notification_set_priority(GNotification*, GNotificationPriority);
extern void g_notification_set_title(GNotification*, char*);
extern void g_notification_set_urgent(GNotification*, int);
extern GType g_notification_get_type();
extern void g_output_stream_clear_pending(GOutputStream*);
extern int g_output_stream_close(GOutputStream*, GCancellable*, GError**);
extern void g_output_stream_close_async(GOutputStream*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_close_async(GOutputStream* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_output_stream_close_finish(GOutputStream*, GAsyncResult*, GError**);
extern int g_output_stream_flush(GOutputStream*, GCancellable*, GError**);
extern void g_output_stream_flush_async(GOutputStream*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_flush_async(GOutputStream* this, int32_t arg0, GCancellable* arg1, void* gofunc);
extern int g_output_stream_flush_finish(GOutputStream*, GAsyncResult*, GError**);
extern int g_output_stream_has_pending(GOutputStream*);
extern int g_output_stream_is_closed(GOutputStream*);
extern int g_output_stream_is_closing(GOutputStream*);
extern int g_output_stream_set_pending(GOutputStream*, GError**);
extern int64_t g_output_stream_splice(GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, GCancellable*, GError**);
extern void g_output_stream_splice_async(GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_splice_async(GOutputStream* this, GInputStream* arg0, GOutputStreamSpliceFlags arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int64_t g_output_stream_splice_finish(GOutputStream*, GAsyncResult*, GError**);
extern int64_t g_output_stream_write(GOutputStream*, uint8_t*, uint64_t, GCancellable*, GError**);
extern int g_output_stream_write_all(GOutputStream*, uint8_t*, uint64_t, uint64_t*, GCancellable*, GError**);
extern void g_output_stream_write_all_async(GOutputStream*, uint8_t*, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_write_all_async(GOutputStream* this, uint8_t* arg0, uint64_t arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int g_output_stream_write_all_finish(GOutputStream*, GAsyncResult*, uint64_t*, GError**);
extern void g_output_stream_write_async(GOutputStream*, uint8_t*, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_write_async(GOutputStream* this, uint8_t* arg0, uint64_t arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int64_t g_output_stream_write_bytes(GOutputStream*, GBytes*, GCancellable*, GError**);
extern void g_output_stream_write_bytes_async(GOutputStream*, GBytes*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_write_bytes_async(GOutputStream* this, GBytes* arg0, int32_t arg1, GCancellable* arg2, void* gofunc);
extern int64_t g_output_stream_write_bytes_finish(GOutputStream*, GAsyncResult*, GError**);
extern int64_t g_output_stream_write_finish(GOutputStream*, GAsyncResult*, GError**);
extern int g_output_stream_writev(GOutputStream*, GOutputVector*, uint64_t, uint64_t*, GCancellable*, GError**);
extern int g_output_stream_writev_all(GOutputStream*, GOutputVector*, uint64_t, uint64_t*, GCancellable*, GError**);
extern void g_output_stream_writev_all_async(GOutputStream*, GOutputVector*, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_writev_all_async(GOutputStream* this, GOutputVector* arg0, uint64_t arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int g_output_stream_writev_all_finish(GOutputStream*, GAsyncResult*, uint64_t*, GError**);
extern void g_output_stream_writev_async(GOutputStream*, GOutputVector*, uint64_t, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_output_stream_writev_async(GOutputStream* this, GOutputVector* arg0, uint64_t arg1, int32_t arg2, GCancellable* arg3, void* gofunc);
extern int g_output_stream_writev_finish(GOutputStream*, GAsyncResult*, uint64_t*, GError**);
extern GType g_output_stream_get_type();
extern int g_permission_acquire(GPermission*, GCancellable*, GError**);
extern void g_permission_acquire_async(GPermission*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_permission_acquire_async(GPermission* this, GCancellable* arg0, void* gofunc);
extern int g_permission_acquire_finish(GPermission*, GAsyncResult*, GError**);
extern int g_permission_get_allowed(GPermission*);
extern int g_permission_get_can_acquire(GPermission*);
extern int g_permission_get_can_release(GPermission*);
extern void g_permission_impl_update(GPermission*, int, int, int);
extern int g_permission_release(GPermission*, GCancellable*, GError**);
extern void g_permission_release_async(GPermission*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_permission_release_async(GPermission* this, GCancellable* arg0, void* gofunc);
extern int g_permission_release_finish(GPermission*, GAsyncResult*, GError**);
extern GType g_permission_get_type();
extern int g_pollable_input_stream_can_poll(GPollableInputStream*);
extern GSource* g_pollable_input_stream_create_source(GPollableInputStream*, GCancellable*);
extern int g_pollable_input_stream_is_readable(GPollableInputStream*);
extern int64_t g_pollable_input_stream_read_nonblocking(GPollableInputStream*, uint8_t**, uint64_t, GCancellable*, GError**);
extern GType g_pollable_input_stream_get_type();
extern int g_pollable_output_stream_can_poll(GPollableOutputStream*);
extern GSource* g_pollable_output_stream_create_source(GPollableOutputStream*, GCancellable*);
extern int g_pollable_output_stream_is_writable(GPollableOutputStream*);
extern int64_t g_pollable_output_stream_write_nonblocking(GPollableOutputStream*, uint8_t*, uint64_t, GCancellable*, GError**);
extern GPollableReturn g_pollable_output_stream_writev_nonblocking(GPollableOutputStream*, GOutputVector*, uint64_t, uint64_t*, GCancellable*, GError**);
extern GType g_pollable_output_stream_get_type();
extern GPowerProfileMonitor* g_power_profile_monitor_dup_default();
extern int g_power_profile_monitor_get_power_saver_enabled(GPowerProfileMonitor*);
extern GType g_power_profile_monitor_get_type();
extern GPropertyAction* g_property_action_new(char*, GObject*, char*);
extern GType g_property_action_get_type();
extern GProxy* g_proxy_get_default_for_protocol(char*);
extern GIOStream* g_proxy_connect(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GError**);
extern void g_proxy_connect_async(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GAsyncReadyCallback, void*);
extern GIOStream* g_proxy_connect_finish(GProxy*, GAsyncResult*, GError**);
extern int g_proxy_supports_hostname(GProxy*);
extern GType g_proxy_get_type();
extern GSocketAddress* g_proxy_address_new(GInetAddress*, uint16_t, char*, char*, uint16_t, char*, char*);
extern char* g_proxy_address_get_destination_hostname(GProxyAddress*);
extern uint16_t g_proxy_address_get_destination_port(GProxyAddress*);
extern char* g_proxy_address_get_destination_protocol(GProxyAddress*);
extern char* g_proxy_address_get_password(GProxyAddress*);
extern char* g_proxy_address_get_protocol(GProxyAddress*);
extern char* g_proxy_address_get_uri(GProxyAddress*);
extern char* g_proxy_address_get_username(GProxyAddress*);
extern GType g_proxy_address_get_type();
extern GType g_proxy_address_enumerator_get_type();
extern GProxyResolver* g_proxy_resolver_get_default();
extern int g_proxy_resolver_is_supported(GProxyResolver*);
extern char** g_proxy_resolver_lookup(GProxyResolver*, char*, GCancellable*, GError**);
extern void g_proxy_resolver_lookup_async(GProxyResolver*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern char** g_proxy_resolver_lookup_finish(GProxyResolver*, GAsyncResult*, GError**);
extern GType g_proxy_resolver_get_type();
extern void g_remote_action_group_activate_action_full(GRemoteActionGroup*, char*, GVariant*, GVariant*);
extern void g_remote_action_group_change_action_state_full(GRemoteActionGroup*, char*, GVariant*, GVariant*);
extern GType g_remote_action_group_get_type();
extern GResolver* g_resolver_get_default();
extern char* g_resolver_lookup_by_address(GResolver*, GInetAddress*, GCancellable*, GError**);
extern void g_resolver_lookup_by_address_async(GResolver*, GInetAddress*, GCancellable*, GAsyncReadyCallback, void*);
extern char* g_resolver_lookup_by_address_finish(GResolver*, GAsyncResult*, GError**);
extern GList* g_resolver_lookup_by_name(GResolver*, char*, GCancellable*, GError**);
extern void g_resolver_lookup_by_name_async(GResolver*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern GList* g_resolver_lookup_by_name_finish(GResolver*, GAsyncResult*, GError**);
extern GList* g_resolver_lookup_by_name_with_flags(GResolver*, char*, GResolverNameLookupFlags, GCancellable*, GError**);
extern void g_resolver_lookup_by_name_with_flags_async(GResolver*, char*, GResolverNameLookupFlags, GCancellable*, GAsyncReadyCallback, void*);
extern GList* g_resolver_lookup_by_name_with_flags_finish(GResolver*, GAsyncResult*, GError**);
extern GList* g_resolver_lookup_records(GResolver*, char*, GResolverRecordType, GCancellable*, GError**);
extern void g_resolver_lookup_records_async(GResolver*, char*, GResolverRecordType, GCancellable*, GAsyncReadyCallback, void*);
extern GList* g_resolver_lookup_records_finish(GResolver*, GAsyncResult*, GError**);
extern GList* g_resolver_lookup_service(GResolver*, char*, char*, char*, GCancellable*, GError**);
extern void g_resolver_lookup_service_async(GResolver*, char*, char*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern GList* g_resolver_lookup_service_finish(GResolver*, GAsyncResult*, GError**);
extern void g_resolver_set_default(GResolver*);
extern GType g_resolver_get_type();
extern GResource* g_resource_new_from_data(GBytes*, GError**);
extern void g_resources_register(GResource*);
extern void g_resources_unregister(GResource*);
extern char** g_resource_enumerate_children(GResource*, char*, GResourceLookupFlags, GError**);
extern int g_resource_get_info(GResource*, char*, GResourceLookupFlags, uint64_t*, uint32_t*, GError**);
extern GBytes* g_resource_lookup_data(GResource*, char*, GResourceLookupFlags, GError**);
extern GInputStream* g_resource_open_stream(GResource*, char*, GResourceLookupFlags, GError**);
extern GResource* g_resource_ref(GResource*);
extern void g_resource_unref(GResource*);
extern GResource* g_resource_load(char*, GError**);
extern int g_seekable_can_seek(GSeekable*);
extern int g_seekable_can_truncate(GSeekable*);
extern int g_seekable_seek(GSeekable*, int64_t, GSeekType, GCancellable*, GError**);
extern int64_t g_seekable_tell(GSeekable*);
extern int g_seekable_truncate(GSeekable*, int64_t, GCancellable*, GError**);
extern GType g_seekable_get_type();
extern GSettings* g_settings_new(char*);
extern GSettings* g_settings_new_full(GSettingsSchema*, GSettingsBackend*, char*);
extern GSettings* g_settings_new_with_backend(char*, GSettingsBackend*);
extern GSettings* g_settings_new_with_backend_and_path(char*, GSettingsBackend*, char*);
extern GSettings* g_settings_new_with_path(char*, char*);
extern char** g_settings_list_relocatable_schemas();
extern char** g_settings_list_schemas();
extern void g_settings_sync();
extern void g_settings_unbind(GObject*, char*);
extern void g_settings_apply(GSettings*);
extern void g_settings_bind(GSettings*, char*, GObject*, char*, GSettingsBindFlags);
extern void g_settings_bind_writable(GSettings*, char*, GObject*, char*, int);
extern GAction* g_settings_create_action(GSettings*, char*);
extern void g_settings_delay(GSettings*);
extern int g_settings_get_boolean(GSettings*, char*);
extern GSettings* g_settings_get_child(GSettings*, char*);
extern GVariant* g_settings_get_default_value(GSettings*, char*);
extern double g_settings_get_double(GSettings*, char*);
extern int32_t g_settings_get_enum(GSettings*, char*);
extern uint32_t g_settings_get_flags(GSettings*, char*);
extern int g_settings_get_has_unapplied(GSettings*);
extern int32_t g_settings_get_int(GSettings*, char*);
extern int64_t g_settings_get_int64(GSettings*, char*);
extern void* g_settings_get_mapped(GSettings*, char*, GSettingsGetMapping, void*);
extern GVariant* g_settings_get_range(GSettings*, char*);
extern char* g_settings_get_string(GSettings*, char*);
extern char** g_settings_get_strv(GSettings*, char*);
extern uint32_t g_settings_get_uint(GSettings*, char*);
extern uint64_t g_settings_get_uint64(GSettings*, char*);
extern GVariant* g_settings_get_user_value(GSettings*, char*);
extern GVariant* g_settings_get_value(GSettings*, char*);
extern int g_settings_is_writable(GSettings*, char*);
extern char** g_settings_list_children(GSettings*);
extern char** g_settings_list_keys(GSettings*);
extern int g_settings_range_check(GSettings*, char*, GVariant*);
extern void g_settings_reset(GSettings*, char*);
extern void g_settings_revert(GSettings*);
extern int g_settings_set_boolean(GSettings*, char*, int);
extern int g_settings_set_double(GSettings*, char*, double);
extern int g_settings_set_enum(GSettings*, char*, int32_t);
extern int g_settings_set_flags(GSettings*, char*, uint32_t);
extern int g_settings_set_int(GSettings*, char*, int32_t);
extern int g_settings_set_int64(GSettings*, char*, int64_t);
extern int g_settings_set_string(GSettings*, char*, char*);
extern int g_settings_set_strv(GSettings*, char*, char**);
extern int g_settings_set_uint(GSettings*, char*, uint32_t);
extern int g_settings_set_uint64(GSettings*, char*, uint64_t);
extern int g_settings_set_value(GSettings*, char*, GVariant*);
extern GType g_settings_get_type();
extern void g_settings_backend_flatten_tree(GTree*, char**, char***, GVariant***);
extern GSettingsBackend* g_settings_backend_get_default();
extern void g_settings_backend_changed(GSettingsBackend*, char*, void*);
extern void g_settings_backend_changed_tree(GSettingsBackend*, GTree*, void*);
extern void g_settings_backend_keys_changed(GSettingsBackend*, char*, char**, void*);
extern void g_settings_backend_path_changed(GSettingsBackend*, char*, void*);
extern void g_settings_backend_path_writable_changed(GSettingsBackend*, char*);
extern void g_settings_backend_writable_changed(GSettingsBackend*, char*);
extern GType g_settings_backend_get_type();
extern char* g_settings_schema_get_id(GSettingsSchema*);
extern GSettingsSchemaKey* g_settings_schema_get_key(GSettingsSchema*, char*);
extern char* g_settings_schema_get_path(GSettingsSchema*);
extern int g_settings_schema_has_key(GSettingsSchema*, char*);
extern char** g_settings_schema_list_children(GSettingsSchema*);
extern char** g_settings_schema_list_keys(GSettingsSchema*);
extern GSettingsSchema* g_settings_schema_ref(GSettingsSchema*);
extern void g_settings_schema_unref(GSettingsSchema*);
extern GVariant* g_settings_schema_key_get_default_value(GSettingsSchemaKey*);
extern char* g_settings_schema_key_get_description(GSettingsSchemaKey*);
extern char* g_settings_schema_key_get_name(GSettingsSchemaKey*);
extern GVariant* g_settings_schema_key_get_range(GSettingsSchemaKey*);
extern char* g_settings_schema_key_get_summary(GSettingsSchemaKey*);
extern GVariantType* g_settings_schema_key_get_value_type(GSettingsSchemaKey*);
extern int g_settings_schema_key_range_check(GSettingsSchemaKey*, GVariant*);
extern GSettingsSchemaKey* g_settings_schema_key_ref(GSettingsSchemaKey*);
extern void g_settings_schema_key_unref(GSettingsSchemaKey*);
extern GSettingsSchemaSource* g_settings_schema_source_new_from_directory(char*, GSettingsSchemaSource*, int, GError**);
extern void g_settings_schema_source_list_schemas(GSettingsSchemaSource*, int, char***, char***);
extern GSettingsSchema* g_settings_schema_source_lookup(GSettingsSchemaSource*, char*, int);
extern GSettingsSchemaSource* g_settings_schema_source_ref(GSettingsSchemaSource*);
extern void g_settings_schema_source_unref(GSettingsSchemaSource*);
extern GSettingsSchemaSource* g_settings_schema_source_get_default();
extern GSimpleAction* g_simple_action_new(char*, GVariantType*);
extern GSimpleAction* g_simple_action_new_stateful(char*, GVariantType*, GVariant*);
extern void g_simple_action_set_enabled(GSimpleAction*, int);
extern void g_simple_action_set_state(GSimpleAction*, GVariant*);
extern void g_simple_action_set_state_hint(GSimpleAction*, GVariant*);
extern GType g_simple_action_get_type();
extern GSimpleActionGroup* g_simple_action_group_new();
extern void g_simple_action_group_add_entries(GSimpleActionGroup*, GActionEntry*, int32_t, void*);
extern void g_simple_action_group_insert(GSimpleActionGroup*, GAction*);
extern GAction* g_simple_action_group_lookup(GSimpleActionGroup*, char*);
extern void g_simple_action_group_remove(GSimpleActionGroup*, char*);
extern GType g_simple_action_group_get_type();
extern GSimpleAsyncResult* g_simple_async_result_new(GObject*, GAsyncReadyCallback, void*, void*);
extern GSimpleAsyncResult* g_simple_async_result_new_from_error(GObject*, GAsyncReadyCallback, void*, GError*);
extern int g_simple_async_result_is_valid(GAsyncResult*, GObject*, void*);
extern void g_simple_async_result_complete(GSimpleAsyncResult*);
extern void g_simple_async_result_complete_in_idle(GSimpleAsyncResult*);
extern int g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult*);
extern int64_t g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult*);
extern int g_simple_async_result_propagate_error(GSimpleAsyncResult*, GError**);
extern void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult*, GCancellable*);
extern void g_simple_async_result_set_from_error(GSimpleAsyncResult*, GError*);
extern void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult*, int);
extern void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult*, int);
extern void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult*, int64_t);
extern GType g_simple_async_result_get_type();
extern GIOStream* g_simple_io_stream_new(GInputStream*, GOutputStream*);
extern GType g_simple_io_stream_get_type();
extern GPermission* g_simple_permission_new(int);
extern GType g_simple_permission_get_type();
extern GProxyResolver* g_simple_proxy_resolver_new(char*, char*);
extern void g_simple_proxy_resolver_set_default_proxy(GSimpleProxyResolver*, char*);
extern void g_simple_proxy_resolver_set_ignore_hosts(GSimpleProxyResolver*, char*);
extern void g_simple_proxy_resolver_set_uri_proxy(GSimpleProxyResolver*, char*, char*);
extern GType g_simple_proxy_resolver_get_type();
extern GSocket* g_socket_new(GSocketFamily, GSocketType, GSocketProtocol, GError**);
extern GSocket* g_socket_new_from_fd(int32_t, GError**);
extern GSocket* g_socket_accept(GSocket*, GCancellable*, GError**);
extern int g_socket_bind(GSocket*, GSocketAddress*, int, GError**);
extern int g_socket_check_connect_result(GSocket*, GError**);
extern int g_socket_close(GSocket*, GError**);
extern GIOCondition g_socket_condition_check(GSocket*, GIOCondition);
extern int g_socket_condition_timed_wait(GSocket*, GIOCondition, int64_t, GCancellable*, GError**);
extern int g_socket_condition_wait(GSocket*, GIOCondition, GCancellable*, GError**);
extern int g_socket_connect(GSocket*, GSocketAddress*, GCancellable*, GError**);
extern GSocketConnection* g_socket_connection_factory_create_connection(GSocket*);
extern int64_t g_socket_get_available_bytes(GSocket*);
extern int g_socket_get_blocking(GSocket*);
extern int g_socket_get_broadcast(GSocket*);
extern GCredentials* g_socket_get_credentials(GSocket*, GError**);
extern GSocketFamily g_socket_get_family(GSocket*);
extern int32_t g_socket_get_fd(GSocket*);
extern int g_socket_get_keepalive(GSocket*);
extern int32_t g_socket_get_listen_backlog(GSocket*);
extern GSocketAddress* g_socket_get_local_address(GSocket*, GError**);
extern int g_socket_get_multicast_loopback(GSocket*);
extern uint32_t g_socket_get_multicast_ttl(GSocket*);
extern int g_socket_get_option(GSocket*, int32_t, int32_t, int32_t*, GError**);
extern GSocketProtocol g_socket_get_protocol(GSocket*);
extern GSocketAddress* g_socket_get_remote_address(GSocket*, GError**);
extern GSocketType g_socket_get_socket_type(GSocket*);
extern uint32_t g_socket_get_timeout(GSocket*);
extern uint32_t g_socket_get_ttl(GSocket*);
extern int g_socket_is_closed(GSocket*);
extern int g_socket_is_connected(GSocket*);
extern int g_socket_join_multicast_group(GSocket*, GInetAddress*, int, char*, GError**);
extern int g_socket_join_multicast_group_ssm(GSocket*, GInetAddress*, GInetAddress*, char*, GError**);
extern int g_socket_leave_multicast_group(GSocket*, GInetAddress*, int, char*, GError**);
extern int g_socket_leave_multicast_group_ssm(GSocket*, GInetAddress*, GInetAddress*, char*, GError**);
extern int g_socket_listen(GSocket*, GError**);
extern int64_t g_socket_receive(GSocket*, uint8_t**, uint64_t*, GCancellable*, GError**);
extern int64_t g_socket_receive_from(GSocket*, GSocketAddress**, uint8_t**, uint64_t*, GCancellable*, GError**);
extern int64_t g_socket_receive_message(GSocket*, GSocketAddress**, GInputVector*, int32_t, GSocketControlMessage***, int32_t*, int32_t*, GCancellable*, GError**);
extern int32_t g_socket_receive_messages(GSocket*, GInputMessage*, uint32_t, int32_t, GCancellable*, GError**);
extern int64_t g_socket_receive_with_blocking(GSocket*, uint8_t**, uint64_t*, int, GCancellable*, GError**);
extern int64_t g_socket_send(GSocket*, uint8_t*, uint64_t, GCancellable*, GError**);
extern int64_t g_socket_send_message(GSocket*, GSocketAddress*, GOutputVector*, int32_t, GSocketControlMessage**, int32_t, int32_t, GCancellable*, GError**);
extern GPollableReturn g_socket_send_message_with_timeout(GSocket*, GSocketAddress*, GOutputVector*, int32_t, GSocketControlMessage**, int32_t, int32_t, int64_t, uint64_t*, GCancellable*, GError**);
extern int32_t g_socket_send_messages(GSocket*, GOutputMessage*, uint32_t, int32_t, GCancellable*, GError**);
extern int64_t g_socket_send_to(GSocket*, GSocketAddress*, uint8_t*, uint64_t, GCancellable*, GError**);
extern int64_t g_socket_send_with_blocking(GSocket*, uint8_t*, uint64_t, int, GCancellable*, GError**);
extern void g_socket_set_blocking(GSocket*, int);
extern void g_socket_set_broadcast(GSocket*, int);
extern void g_socket_set_keepalive(GSocket*, int);
extern void g_socket_set_listen_backlog(GSocket*, int32_t);
extern void g_socket_set_multicast_loopback(GSocket*, int);
extern void g_socket_set_multicast_ttl(GSocket*, uint32_t);
extern int g_socket_set_option(GSocket*, int32_t, int32_t, int32_t, GError**);
extern void g_socket_set_timeout(GSocket*, uint32_t);
extern void g_socket_set_ttl(GSocket*, uint32_t);
extern int g_socket_shutdown(GSocket*, int, int, GError**);
extern int g_socket_speaks_ipv4(GSocket*);
extern GType g_socket_get_type();
extern GSocketAddress* g_socket_address_new_from_native(void*, uint64_t);
extern GSocketFamily g_socket_address_get_family(GSocketAddress*);
extern int64_t g_socket_address_get_native_size(GSocketAddress*);
extern int g_socket_address_to_native(GSocketAddress*, void*, uint64_t, GError**);
extern GType g_socket_address_get_type();
extern GSocketAddress* g_socket_address_enumerator_next(GSocketAddressEnumerator*, GCancellable*, GError**);
extern void g_socket_address_enumerator_next_async(GSocketAddressEnumerator*, GCancellable*, GAsyncReadyCallback, void*);
extern GSocketAddress* g_socket_address_enumerator_next_finish(GSocketAddressEnumerator*, GAsyncResult*, GError**);
extern GType g_socket_address_enumerator_get_type();
extern GSocketClient* g_socket_client_new();
extern void g_socket_client_add_application_proxy(GSocketClient*, char*);
extern GSocketConnection* g_socket_client_connect(GSocketClient*, GSocketConnectable*, GCancellable*, GError**);
extern void g_socket_client_connect_async(GSocketClient*, GSocketConnectable*, GCancellable*, GAsyncReadyCallback, void*);
extern GSocketConnection* g_socket_client_connect_finish(GSocketClient*, GAsyncResult*, GError**);
extern GSocketConnection* g_socket_client_connect_to_host(GSocketClient*, char*, uint16_t, GCancellable*, GError**);
extern void g_socket_client_connect_to_host_async(GSocketClient*, char*, uint16_t, GCancellable*, GAsyncReadyCallback, void*);
extern GSocketConnection* g_socket_client_connect_to_host_finish(GSocketClient*, GAsyncResult*, GError**);
extern GSocketConnection* g_socket_client_connect_to_service(GSocketClient*, char*, char*, GCancellable*, GError**);
extern void g_socket_client_connect_to_service_async(GSocketClient*, char*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern GSocketConnection* g_socket_client_connect_to_service_finish(GSocketClient*, GAsyncResult*, GError**);
extern GSocketConnection* g_socket_client_connect_to_uri(GSocketClient*, char*, uint16_t, GCancellable*, GError**);
extern void g_socket_client_connect_to_uri_async(GSocketClient*, char*, uint16_t, GCancellable*, GAsyncReadyCallback, void*);
extern GSocketConnection* g_socket_client_connect_to_uri_finish(GSocketClient*, GAsyncResult*, GError**);
extern int g_socket_client_get_enable_proxy(GSocketClient*);
extern GSocketFamily g_socket_client_get_family(GSocketClient*);
extern GSocketAddress* g_socket_client_get_local_address(GSocketClient*);
extern GSocketProtocol g_socket_client_get_protocol(GSocketClient*);
extern GProxyResolver* g_socket_client_get_proxy_resolver(GSocketClient*);
extern GSocketType g_socket_client_get_socket_type(GSocketClient*);
extern uint32_t g_socket_client_get_timeout(GSocketClient*);
extern int g_socket_client_get_tls(GSocketClient*);
extern GTlsCertificateFlags g_socket_client_get_tls_validation_flags(GSocketClient*);
extern void g_socket_client_set_enable_proxy(GSocketClient*, int);
extern void g_socket_client_set_family(GSocketClient*, GSocketFamily);
extern void g_socket_client_set_local_address(GSocketClient*, GSocketAddress*);
extern void g_socket_client_set_protocol(GSocketClient*, GSocketProtocol);
extern void g_socket_client_set_proxy_resolver(GSocketClient*, GProxyResolver*);
extern void g_socket_client_set_socket_type(GSocketClient*, GSocketType);
extern void g_socket_client_set_timeout(GSocketClient*, uint32_t);
extern void g_socket_client_set_tls(GSocketClient*, int);
extern void g_socket_client_set_tls_validation_flags(GSocketClient*, GTlsCertificateFlags);
extern GType g_socket_client_get_type();
extern GSocketAddressEnumerator* g_socket_connectable_enumerate(GSocketConnectable*);
extern GSocketAddressEnumerator* g_socket_connectable_proxy_enumerate(GSocketConnectable*);
extern char* g_socket_connectable_to_string(GSocketConnectable*);
extern GType g_socket_connectable_get_type();
extern GType g_socket_connection_factory_lookup_type(GSocketFamily, GSocketType, int32_t);
extern void g_socket_connection_factory_register_type(GType, GSocketFamily, GSocketType, int32_t);
extern int g_socket_connection_connect(GSocketConnection*, GSocketAddress*, GCancellable*, GError**);
extern void g_socket_connection_connect_async(GSocketConnection*, GSocketAddress*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_socket_connection_connect_finish(GSocketConnection*, GAsyncResult*, GError**);
extern GSocketAddress* g_socket_connection_get_local_address(GSocketConnection*, GError**);
extern GSocketAddress* g_socket_connection_get_remote_address(GSocketConnection*, GError**);
extern GSocket* g_socket_connection_get_socket(GSocketConnection*);
extern int g_socket_connection_is_connected(GSocketConnection*);
extern GType g_socket_connection_get_type();
extern GSocketControlMessage* g_socket_control_message_deserialize(int32_t, int32_t, uint64_t, uint8_t*);
extern int32_t g_socket_control_message_get_level(GSocketControlMessage*);
extern int32_t g_socket_control_message_get_msg_type(GSocketControlMessage*);
extern uint64_t g_socket_control_message_get_size(GSocketControlMessage*);
extern void g_socket_control_message_serialize(GSocketControlMessage*, void*);
extern GType g_socket_control_message_get_type();
extern GSocketListener* g_socket_listener_new();
extern GSocketConnection* g_socket_listener_accept(GSocketListener*, GObject**, GCancellable*, GError**);
extern void g_socket_listener_accept_async(GSocketListener*, GCancellable*, GAsyncReadyCallback, void*);
extern GSocketConnection* g_socket_listener_accept_finish(GSocketListener*, GAsyncResult*, GObject**, GError**);
extern GSocket* g_socket_listener_accept_socket(GSocketListener*, GObject**, GCancellable*, GError**);
extern void g_socket_listener_accept_socket_async(GSocketListener*, GCancellable*, GAsyncReadyCallback, void*);
extern GSocket* g_socket_listener_accept_socket_finish(GSocketListener*, GAsyncResult*, GObject**, GError**);
extern int g_socket_listener_add_address(GSocketListener*, GSocketAddress*, GSocketType, GSocketProtocol, GObject*, GSocketAddress**, GError**);
extern uint16_t g_socket_listener_add_any_inet_port(GSocketListener*, GObject*, GError**);
extern int g_socket_listener_add_inet_port(GSocketListener*, uint16_t, GObject*, GError**);
extern int g_socket_listener_add_socket(GSocketListener*, GSocket*, GObject*, GError**);
extern void g_socket_listener_close(GSocketListener*);
extern void g_socket_listener_set_backlog(GSocketListener*, int32_t);
extern GType g_socket_listener_get_type();
extern GSocketService* g_socket_service_new();
extern int g_socket_service_is_active(GSocketService*);
extern void g_socket_service_start(GSocketService*);
extern void g_socket_service_stop(GSocketService*);
extern GType g_socket_service_get_type();
extern GSrvTarget* g_srv_target_new(char*, uint16_t, uint16_t, uint16_t);
extern GSrvTarget* g_srv_target_copy(GSrvTarget*);
extern void g_srv_target_free(GSrvTarget*);
extern char* g_srv_target_get_hostname(GSrvTarget*);
extern uint16_t g_srv_target_get_port(GSrvTarget*);
extern uint16_t g_srv_target_get_priority(GSrvTarget*);
extern uint16_t g_srv_target_get_weight(GSrvTarget*);
extern void g_static_resource_fini(GStaticResource*);
extern GResource* g_static_resource_get_resource(GStaticResource*);
extern void g_static_resource_init(GStaticResource*);
extern GSubprocess* g_subprocess_newv(char**, GSubprocessFlags, GError**);
extern int g_subprocess_communicate(GSubprocess*, GBytes*, GCancellable*, GBytes**, GBytes**, GError**);
extern void g_subprocess_communicate_async(GSubprocess*, GBytes*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_subprocess_communicate_finish(GSubprocess*, GAsyncResult*, GBytes**, GBytes**, GError**);
extern int g_subprocess_communicate_utf8(GSubprocess*, char*, GCancellable*, char**, char**, GError**);
extern void g_subprocess_communicate_utf8_async(GSubprocess*, char*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_subprocess_communicate_utf8_finish(GSubprocess*, GAsyncResult*, char**, char**, GError**);
extern void g_subprocess_force_exit(GSubprocess*);
extern int32_t g_subprocess_get_exit_status(GSubprocess*);
extern char* g_subprocess_get_identifier(GSubprocess*);
extern int g_subprocess_get_if_exited(GSubprocess*);
extern int g_subprocess_get_if_signaled(GSubprocess*);
extern int32_t g_subprocess_get_status(GSubprocess*);
extern GInputStream* g_subprocess_get_stderr_pipe(GSubprocess*);
extern GOutputStream* g_subprocess_get_stdin_pipe(GSubprocess*);
extern GInputStream* g_subprocess_get_stdout_pipe(GSubprocess*);
extern int g_subprocess_get_successful(GSubprocess*);
extern int32_t g_subprocess_get_term_sig(GSubprocess*);
extern void g_subprocess_send_signal(GSubprocess*, int32_t);
extern int g_subprocess_wait(GSubprocess*, GCancellable*, GError**);
extern void g_subprocess_wait_async(GSubprocess*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_subprocess_wait_check(GSubprocess*, GCancellable*, GError**);
extern void g_subprocess_wait_check_async(GSubprocess*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_subprocess_wait_check_finish(GSubprocess*, GAsyncResult*, GError**);
extern int g_subprocess_wait_finish(GSubprocess*, GAsyncResult*, GError**);
extern GType g_subprocess_get_type();
extern GSubprocessLauncher* g_subprocess_launcher_new(GSubprocessFlags);
extern void g_subprocess_launcher_close(GSubprocessLauncher*);
extern char* g_subprocess_launcher_getenv(GSubprocessLauncher*, char*);
extern void g_subprocess_launcher_set_cwd(GSubprocessLauncher*, char*);
extern void g_subprocess_launcher_set_environ(GSubprocessLauncher*, char**);
extern void g_subprocess_launcher_set_flags(GSubprocessLauncher*, GSubprocessFlags);
extern void g_subprocess_launcher_set_stderr_file_path(GSubprocessLauncher*, char*);
extern void g_subprocess_launcher_set_stdin_file_path(GSubprocessLauncher*, char*);
extern void g_subprocess_launcher_set_stdout_file_path(GSubprocessLauncher*, char*);
extern void g_subprocess_launcher_setenv(GSubprocessLauncher*, char*, char*, int);
extern GSubprocess* g_subprocess_launcher_spawnv(GSubprocessLauncher*, char**, GError**);
extern void g_subprocess_launcher_take_fd(GSubprocessLauncher*, int32_t, int32_t);
extern void g_subprocess_launcher_take_stderr_fd(GSubprocessLauncher*, int32_t);
extern void g_subprocess_launcher_take_stdin_fd(GSubprocessLauncher*, int32_t);
extern void g_subprocess_launcher_take_stdout_fd(GSubprocessLauncher*, int32_t);
extern void g_subprocess_launcher_unsetenv(GSubprocessLauncher*, char*);
extern GType g_subprocess_launcher_get_type();
extern GTask* g_task_new(GObject*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_task_is_valid(GAsyncResult*, GObject*);
extern void g_task_report_error(GObject*, GAsyncReadyCallback, void*, void*, GError*);
extern GCancellable* g_task_get_cancellable(GTask*);
extern int g_task_get_check_cancellable(GTask*);
extern int g_task_get_completed(GTask*);
extern GMainContext* g_task_get_context(GTask*);
extern char* g_task_get_name(GTask*);
extern int32_t g_task_get_priority(GTask*);
extern int g_task_get_return_on_cancel(GTask*);
extern GObject* g_task_get_source_object(GTask*);
extern void* g_task_get_source_tag(GTask*);
extern void* g_task_get_task_data(GTask*);
extern int g_task_had_error(GTask*);
extern int g_task_propagate_boolean(GTask*, GError**);
extern int64_t g_task_propagate_int(GTask*, GError**);
extern void* g_task_propagate_pointer(GTask*, GError**);
extern int g_task_propagate_value(GTask*, GValue*, GError**);
extern void g_task_return_boolean(GTask*, int);
extern void g_task_return_error(GTask*, GError*);
extern int g_task_return_error_if_cancelled(GTask*);
extern void g_task_return_int(GTask*, int64_t);
extern void g_task_return_pointer(GTask*, void*, GDestroyNotify);
extern void g_task_return_value(GTask*, GValue*);
extern void g_task_run_in_thread(GTask*, GTaskThreadFunc);
extern void g_task_run_in_thread_sync(GTask*, GTaskThreadFunc);
extern void g_task_set_check_cancellable(GTask*, int);
extern void g_task_set_name(GTask*, char*);
extern void g_task_set_priority(GTask*, int32_t);
extern int g_task_set_return_on_cancel(GTask*, int);
extern void g_task_set_source_tag(GTask*, void*);
extern void g_task_set_task_data(GTask*, void*, GDestroyNotify);
extern GType g_task_get_type();
extern int g_tcp_connection_get_graceful_disconnect(GTcpConnection*);
extern void g_tcp_connection_set_graceful_disconnect(GTcpConnection*, int);
extern GType g_tcp_connection_get_type();
extern GSocketConnection* g_tcp_wrapper_connection_new(GIOStream*, GSocket*);
extern GIOStream* g_tcp_wrapper_connection_get_base_io_stream(GTcpWrapperConnection*);
extern GType g_tcp_wrapper_connection_get_type();
extern GTestDBus* g_test_dbus_new(GTestDBusFlags);
extern void g_test_dbus_unset();
extern void g_test_dbus_add_service_dir(GTestDBus*, char*);
extern void g_test_dbus_down(GTestDBus*);
extern char* g_test_dbus_get_bus_address(GTestDBus*);
extern GTestDBusFlags g_test_dbus_get_flags(GTestDBus*);
extern void g_test_dbus_stop(GTestDBus*);
extern void g_test_dbus_up(GTestDBus*);
extern GType g_test_dbus_get_type();
extern GThemedIcon* g_themed_icon_new(char*);
extern GThemedIcon* g_themed_icon_new_from_names(char**, int32_t);
extern GThemedIcon* g_themed_icon_new_with_default_fallbacks(char*);
extern void g_themed_icon_append_name(GThemedIcon*, char*);
extern char** g_themed_icon_get_names(GThemedIcon*);
extern void g_themed_icon_prepend_name(GThemedIcon*, char*);
extern GType g_themed_icon_get_type();
extern GSocketService* g_threaded_socket_service_new(int32_t);
extern GType g_threaded_socket_service_get_type();
extern GTlsBackend* g_tls_backend_get_default();
extern GType g_tls_backend_get_certificate_type(GTlsBackend*);
extern GType g_tls_backend_get_client_connection_type(GTlsBackend*);
extern GTlsDatabase* g_tls_backend_get_default_database(GTlsBackend*);
extern GType g_tls_backend_get_dtls_client_connection_type(GTlsBackend*);
extern GType g_tls_backend_get_dtls_server_connection_type(GTlsBackend*);
extern GType g_tls_backend_get_file_database_type(GTlsBackend*);
extern GType g_tls_backend_get_server_connection_type(GTlsBackend*);
extern void g_tls_backend_set_default_database(GTlsBackend*, GTlsDatabase*);
extern int g_tls_backend_supports_dtls(GTlsBackend*);
extern int g_tls_backend_supports_tls(GTlsBackend*);
extern GType g_tls_backend_get_type();
extern GTlsCertificate* g_tls_certificate_new_from_file(char*, GError**);
extern GTlsCertificate* g_tls_certificate_new_from_file_with_password(char*, char*, GError**);
extern GTlsCertificate* g_tls_certificate_new_from_files(char*, char*, GError**);
extern GTlsCertificate* g_tls_certificate_new_from_pem(char*, int64_t, GError**);
extern GTlsCertificate* g_tls_certificate_new_from_pkcs11_uris(char*, char*, GError**);
extern GTlsCertificate* g_tls_certificate_new_from_pkcs12(uint8_t*, uint64_t, char*, GError**);
extern GList* g_tls_certificate_list_new_from_file(char*, GError**);
extern GPtrArray* g_tls_certificate_get_dns_names(GTlsCertificate*);
extern GPtrArray* g_tls_certificate_get_ip_addresses(GTlsCertificate*);
extern GTlsCertificate* g_tls_certificate_get_issuer(GTlsCertificate*);
extern char* g_tls_certificate_get_issuer_name(GTlsCertificate*);
extern GDateTime* g_tls_certificate_get_not_valid_after(GTlsCertificate*);
extern GDateTime* g_tls_certificate_get_not_valid_before(GTlsCertificate*);
extern char* g_tls_certificate_get_subject_name(GTlsCertificate*);
extern int g_tls_certificate_is_same(GTlsCertificate*, GTlsCertificate*);
extern GTlsCertificateFlags g_tls_certificate_verify(GTlsCertificate*, GSocketConnectable*, GTlsCertificate*);
extern GType g_tls_certificate_get_type();
extern GTlsClientConnection* g_tls_client_connection_new(GIOStream*, GSocketConnectable*, GError**);
extern void g_tls_client_connection_copy_session_state(GTlsClientConnection*, GTlsClientConnection*);
extern GList* g_tls_client_connection_get_accepted_cas(GTlsClientConnection*);
extern GSocketConnectable* g_tls_client_connection_get_server_identity(GTlsClientConnection*);
extern int g_tls_client_connection_get_use_ssl3(GTlsClientConnection*);
extern GTlsCertificateFlags g_tls_client_connection_get_validation_flags(GTlsClientConnection*);
extern void g_tls_client_connection_set_server_identity(GTlsClientConnection*, GSocketConnectable*);
extern void g_tls_client_connection_set_use_ssl3(GTlsClientConnection*, int);
extern void g_tls_client_connection_set_validation_flags(GTlsClientConnection*, GTlsCertificateFlags);
extern GType g_tls_client_connection_get_type();
extern int g_tls_connection_emit_accept_certificate(GTlsConnection*, GTlsCertificate*, GTlsCertificateFlags);
extern GTlsCertificate* g_tls_connection_get_certificate(GTlsConnection*);
extern int g_tls_connection_get_channel_binding_data(GTlsConnection*, GTlsChannelBindingType, GByteArray**, GError**);
extern char* g_tls_connection_get_ciphersuite_name(GTlsConnection*);
extern GTlsDatabase* g_tls_connection_get_database(GTlsConnection*);
extern GTlsInteraction* g_tls_connection_get_interaction(GTlsConnection*);
extern char* g_tls_connection_get_negotiated_protocol(GTlsConnection*);
extern GTlsCertificate* g_tls_connection_get_peer_certificate(GTlsConnection*);
extern GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(GTlsConnection*);
extern GTlsProtocolVersion g_tls_connection_get_protocol_version(GTlsConnection*);
extern GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(GTlsConnection*);
extern int g_tls_connection_get_require_close_notify(GTlsConnection*);
extern int g_tls_connection_get_use_system_certdb(GTlsConnection*);
extern int g_tls_connection_handshake(GTlsConnection*, GCancellable*, GError**);
extern void g_tls_connection_handshake_async(GTlsConnection*, int32_t, GCancellable*, GAsyncReadyCallback, void*);
extern int g_tls_connection_handshake_finish(GTlsConnection*, GAsyncResult*, GError**);
extern void g_tls_connection_set_advertised_protocols(GTlsConnection*, char**);
extern void g_tls_connection_set_certificate(GTlsConnection*, GTlsCertificate*);
extern void g_tls_connection_set_database(GTlsConnection*, GTlsDatabase*);
extern void g_tls_connection_set_interaction(GTlsConnection*, GTlsInteraction*);
extern void g_tls_connection_set_rehandshake_mode(GTlsConnection*, GTlsRehandshakeMode);
extern void g_tls_connection_set_require_close_notify(GTlsConnection*, int);
extern void g_tls_connection_set_use_system_certdb(GTlsConnection*, int);
extern GType g_tls_connection_get_type();
extern char* g_tls_database_create_certificate_handle(GTlsDatabase*, GTlsCertificate*);
extern GTlsCertificate* g_tls_database_lookup_certificate_for_handle(GTlsDatabase*, char*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**);
extern void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase*, char*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, void*);
extern GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase*, GAsyncResult*, GError**);
extern GTlsCertificate* g_tls_database_lookup_certificate_issuer(GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**);
extern void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, void*);
extern GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase*, GAsyncResult*, GError**);
extern GList* g_tls_database_lookup_certificates_issued_by(GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**);
extern void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GAsyncReadyCallback, void*);
extern GList* g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase*, GAsyncResult*, GError**);
extern GTlsCertificateFlags g_tls_database_verify_chain(GTlsDatabase*, GTlsCertificate*, char*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GError**);
extern void g_tls_database_verify_chain_async(GTlsDatabase*, GTlsCertificate*, char*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GAsyncReadyCallback, void*);
extern GTlsCertificateFlags g_tls_database_verify_chain_finish(GTlsDatabase*, GAsyncResult*, GError**);
extern GType g_tls_database_get_type();
extern GTlsFileDatabase* g_tls_file_database_new(char*, GError**);
extern GType g_tls_file_database_get_type();
extern GTlsInteractionResult g_tls_interaction_ask_password(GTlsInteraction*, GTlsPassword*, GCancellable*, GError**);
extern void g_tls_interaction_ask_password_async(GTlsInteraction*, GTlsPassword*, GCancellable*, GAsyncReadyCallback, void*);
extern GTlsInteractionResult g_tls_interaction_ask_password_finish(GTlsInteraction*, GAsyncResult*, GError**);
extern GTlsInteractionResult g_tls_interaction_invoke_ask_password(GTlsInteraction*, GTlsPassword*, GCancellable*, GError**);
extern GTlsInteractionResult g_tls_interaction_invoke_request_certificate(GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, GError**);
extern GTlsInteractionResult g_tls_interaction_request_certificate(GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, GError**);
extern void g_tls_interaction_request_certificate_async(GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, GAsyncReadyCallback, void*);
extern GTlsInteractionResult g_tls_interaction_request_certificate_finish(GTlsInteraction*, GAsyncResult*, GError**);
extern GType g_tls_interaction_get_type();
extern GTlsPassword* g_tls_password_new(GTlsPasswordFlags, char*);
extern char* g_tls_password_get_description(GTlsPassword*);
extern GTlsPasswordFlags g_tls_password_get_flags(GTlsPassword*);
extern uint8_t* g_tls_password_get_value(GTlsPassword*, uint64_t*);
extern char* g_tls_password_get_warning(GTlsPassword*);
extern void g_tls_password_set_description(GTlsPassword*, char*);
extern void g_tls_password_set_flags(GTlsPassword*, GTlsPasswordFlags);
extern void g_tls_password_set_value(GTlsPassword*, uint8_t*, int64_t);
extern void g_tls_password_set_value_full(GTlsPassword*, uint8_t*, int64_t, GDestroyNotify);
extern void g_tls_password_set_warning(GTlsPassword*, char*);
extern GType g_tls_password_get_type();
extern GTlsServerConnection* g_tls_server_connection_new(GIOStream*, GTlsCertificate*, GError**);
extern GType g_tls_server_connection_get_type();
extern GCredentials* g_unix_connection_receive_credentials(GUnixConnection*, GCancellable*, GError**);
extern void g_unix_connection_receive_credentials_async(GUnixConnection*, GCancellable*, GAsyncReadyCallback, void*);
extern GCredentials* g_unix_connection_receive_credentials_finish(GUnixConnection*, GAsyncResult*, GError**);
extern int32_t g_unix_connection_receive_fd(GUnixConnection*, GCancellable*, GError**);
extern int g_unix_connection_send_credentials(GUnixConnection*, GCancellable*, GError**);
extern void g_unix_connection_send_credentials_async(GUnixConnection*, GCancellable*, GAsyncReadyCallback, void*);
extern int g_unix_connection_send_credentials_finish(GUnixConnection*, GAsyncResult*, GError**);
extern int g_unix_connection_send_fd(GUnixConnection*, int32_t, GCancellable*, GError**);
extern GType g_unix_connection_get_type();
extern GSocketControlMessage* g_unix_credentials_message_new();
extern GSocketControlMessage* g_unix_credentials_message_new_with_credentials(GCredentials*);
extern int g_unix_credentials_message_is_supported();
extern GCredentials* g_unix_credentials_message_get_credentials(GUnixCredentialsMessage*);
extern GType g_unix_credentials_message_get_type();
extern GUnixFDList* g_unix_fd_list_new();
extern GUnixFDList* g_unix_fd_list_new_from_array(int32_t*, int32_t);
extern int32_t g_unix_fd_list_append(GUnixFDList*, int32_t, GError**);
extern int32_t g_unix_fd_list_get(GUnixFDList*, int32_t, GError**);
extern int32_t g_unix_fd_list_get_length(GUnixFDList*);
extern int32_t* g_unix_fd_list_peek_fds(GUnixFDList*, int32_t*);
extern int32_t* g_unix_fd_list_steal_fds(GUnixFDList*, int32_t*);
extern GType g_unix_fd_list_get_type();
extern GSocketControlMessage* g_unix_fd_message_new();
extern GSocketControlMessage* g_unix_fd_message_new_with_fd_list(GUnixFDList*);
extern int g_unix_fd_message_append_fd(GUnixFDMessage*, int32_t, GError**);
extern GUnixFDList* g_unix_fd_message_get_fd_list(GUnixFDMessage*);
extern int32_t* g_unix_fd_message_steal_fds(GUnixFDMessage*, int32_t*);
extern GType g_unix_fd_message_get_type();
extern GInputStream* g_unix_input_stream_new(int32_t, int);
extern int g_unix_input_stream_get_close_fd(GUnixInputStream*);
extern int32_t g_unix_input_stream_get_fd(GUnixInputStream*);
extern void g_unix_input_stream_set_close_fd(GUnixInputStream*, int);
extern GType g_unix_input_stream_get_type();
extern GUnixMountMonitor* g_unix_mount_monitor_new();
extern GUnixMountMonitor* g_unix_mount_monitor_get();
extern void g_unix_mount_monitor_set_rate_limit(GUnixMountMonitor*, int32_t);
extern GType g_unix_mount_monitor_get_type();
extern int32_t g_unix_mount_point_compare(GUnixMountPoint*, GUnixMountPoint*);
extern GUnixMountPoint* g_unix_mount_point_copy(GUnixMountPoint*);
extern void g_unix_mount_point_free(GUnixMountPoint*);
extern char* g_unix_mount_point_get_device_path(GUnixMountPoint*);
extern char* g_unix_mount_point_get_fs_type(GUnixMountPoint*);
extern char* g_unix_mount_point_get_mount_path(GUnixMountPoint*);
extern char* g_unix_mount_point_get_options(GUnixMountPoint*);
extern int g_unix_mount_point_guess_can_eject(GUnixMountPoint*);
extern GIcon* g_unix_mount_point_guess_icon(GUnixMountPoint*);
extern char* g_unix_mount_point_guess_name(GUnixMountPoint*);
extern GIcon* g_unix_mount_point_guess_symbolic_icon(GUnixMountPoint*);
extern int g_unix_mount_point_is_loopback(GUnixMountPoint*);
extern int g_unix_mount_point_is_readonly(GUnixMountPoint*);
extern int g_unix_mount_point_is_user_mountable(GUnixMountPoint*);
extern GUnixMountPoint* g_unix_mount_point_at(char*, uint64_t*);
extern GOutputStream* g_unix_output_stream_new(int32_t, int);
extern int g_unix_output_stream_get_close_fd(GUnixOutputStream*);
extern int32_t g_unix_output_stream_get_fd(GUnixOutputStream*);
extern void g_unix_output_stream_set_close_fd(GUnixOutputStream*, int);
extern GType g_unix_output_stream_get_type();
extern GSocketAddress* g_unix_socket_address_new(char*);
extern GSocketAddress* g_unix_socket_address_new_abstract(int8_t*, int32_t);
extern GSocketAddress* g_unix_socket_address_new_with_type(int8_t*, int32_t, GUnixSocketAddressType);
extern int g_unix_socket_address_abstract_names_supported();
extern GUnixSocketAddressType g_unix_socket_address_get_address_type(GUnixSocketAddress*);
extern int g_unix_socket_address_get_is_abstract(GUnixSocketAddress*);
extern char* g_unix_socket_address_get_path(GUnixSocketAddress*);
extern uint64_t g_unix_socket_address_get_path_len(GUnixSocketAddress*);
extern GType g_unix_socket_address_get_type();
extern GVfs* g_vfs_get_default();
extern GVfs* g_vfs_get_local();
extern GFile* g_vfs_get_file_for_path(GVfs*, char*);
extern GFile* g_vfs_get_file_for_uri(GVfs*, char*);
extern char** g_vfs_get_supported_uri_schemes(GVfs*);
extern int g_vfs_is_active(GVfs*);
extern GFile* g_vfs_parse_name(GVfs*, char*);
extern int g_vfs_register_uri_scheme(GVfs*, char*, GVfsFileLookupFunc, void*, GDestroyNotify, GVfsFileLookupFunc, void*, GDestroyNotify);
extern int g_vfs_unregister_uri_scheme(GVfs*, char*);
extern GType g_vfs_get_type();
extern int g_volume_can_eject(GVolume*);
extern int g_volume_can_mount(GVolume*);
extern void g_volume_eject(GVolume*, GMountUnmountFlags, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_volume_eject(GVolume* this, GMountUnmountFlags arg0, GCancellable* arg1, void* gofunc);
extern int g_volume_eject_finish(GVolume*, GAsyncResult*, GError**);
extern void g_volume_eject_with_operation(GVolume*, GMountUnmountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_volume_eject_with_operation(GVolume* this, GMountUnmountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_volume_eject_with_operation_finish(GVolume*, GAsyncResult*, GError**);
extern char** g_volume_enumerate_identifiers(GVolume*);
extern GFile* g_volume_get_activation_root(GVolume*);
extern GDrive* g_volume_get_drive(GVolume*);
extern GIcon* g_volume_get_icon(GVolume*);
extern char* g_volume_get_identifier(GVolume*, char*);
extern GMount* g_volume_get_mount(GVolume*);
extern char* g_volume_get_name(GVolume*);
extern char* g_volume_get_sort_key(GVolume*);
extern GIcon* g_volume_get_symbolic_icon(GVolume*);
extern char* g_volume_get_uuid(GVolume*);
extern void g_volume_mount(GVolume*, GMountMountFlags, GMountOperation*, GCancellable*, GAsyncReadyCallback, void*);
extern void _g_volume_mount(GVolume* this, GMountMountFlags arg0, GMountOperation* arg1, GCancellable* arg2, void* gofunc);
extern int g_volume_mount_finish(GVolume*, GAsyncResult*, GError**);
extern int g_volume_should_automount(GVolume*);
extern GType g_volume_get_type();
extern GVolume* g_volume_monitor_adopt_orphan_mount(GMount*);
extern GVolumeMonitor* g_volume_monitor_get();
extern GList* g_volume_monitor_get_connected_drives(GVolumeMonitor*);
extern GMount* g_volume_monitor_get_mount_for_uuid(GVolumeMonitor*, char*);
extern GList* g_volume_monitor_get_mounts(GVolumeMonitor*);
extern GVolume* g_volume_monitor_get_volume_for_uuid(GVolumeMonitor*, char*);
extern GList* g_volume_monitor_get_volumes(GVolumeMonitor*);
extern GType g_volume_monitor_get_type();
extern GZlibCompressor* g_zlib_compressor_new(GZlibCompressorFormat, int32_t);
extern GFileInfo* g_zlib_compressor_get_file_info(GZlibCompressor*);
extern void g_zlib_compressor_set_file_info(GZlibCompressor*, GFileInfo*);
extern GType g_zlib_compressor_get_type();
extern GZlibDecompressor* g_zlib_decompressor_new(GZlibCompressorFormat);
extern GFileInfo* g_zlib_decompressor_get_file_info(GZlibDecompressor*);
extern GType g_zlib_decompressor_get_type();
extern void g_bus_get(GBusType, GCancellable*, GAsyncReadyCallback, void*);
extern GDBusConnection* g_bus_get_finish(GAsyncResult*, GError**);
extern GDBusConnection* g_bus_get_sync(GBusType, GCancellable*, GError**);
extern uint32_t g_bus_own_name_on_connection_with_closures(GDBusConnection*, char*, GBusNameOwnerFlags, GClosure*, GClosure*);
extern uint32_t g_bus_own_name_with_closures(GBusType, char*, GBusNameOwnerFlags, GClosure*, GClosure*, GClosure*);
extern void g_bus_unown_name(uint32_t);
extern void g_bus_unwatch_name(uint32_t);
extern uint32_t g_bus_watch_name_on_connection_with_closures(GDBusConnection*, char*, GBusNameWatcherFlags, GClosure*, GClosure*);
extern uint32_t g_bus_watch_name_with_closures(GBusType, char*, GBusNameWatcherFlags, GClosure*, GClosure*);
extern int g_content_type_can_be_executable(char*);
extern int g_content_type_equals(char*, char*);
extern char* g_content_type_from_mime_type(char*);
extern char* g_content_type_get_description(char*);
extern char* g_content_type_get_generic_icon_name(char*);
extern GIcon* g_content_type_get_icon(char*);
extern char** g_content_type_get_mime_dirs();
extern char* g_content_type_get_mime_type(char*);
extern GIcon* g_content_type_get_symbolic_icon(char*);
extern char* g_content_type_guess(char*, uint8_t*, uint64_t, int*);
extern char** g_content_type_guess_for_tree(GFile*);
extern int g_content_type_is_a(char*, char*);
extern int g_content_type_is_mime_type(char*, char*);
extern int g_content_type_is_unknown(char*);
extern void g_content_type_set_mime_dirs(char**);
extern GList* g_content_types_get_registered();
extern char* g_dbus_address_escape_value(char*);
extern char* g_dbus_address_get_for_bus_sync(GBusType, GCancellable*, GError**);
extern void g_dbus_address_get_stream(char*, GCancellable*, GAsyncReadyCallback, void*);
extern GIOStream* g_dbus_address_get_stream_finish(GAsyncResult*, char**, GError**);
extern GIOStream* g_dbus_address_get_stream_sync(char*, char**, GCancellable*, GError**);
extern char* g_dbus_error_encode_gerror(GError*);
extern char* g_dbus_error_get_remote_error(GError*);
extern int g_dbus_error_is_remote_error(GError*);
extern GError* g_dbus_error_new_for_dbus_error(char*, char*);
extern uint32_t g_dbus_error_quark();
extern int g_dbus_error_register_error(uint32_t, int32_t, char*);
extern void g_dbus_error_register_error_domain(char*, uint64_t*, GDBusErrorEntry*, uint32_t);
extern int g_dbus_error_strip_remote_error(GError*);
extern int g_dbus_error_unregister_error(uint32_t, int32_t, char*);
extern char* g_dbus_escape_object_path(char*);
extern char* g_dbus_escape_object_path_bytestring(uint8_t*);
extern char* g_dbus_generate_guid();
extern GVariant* g_dbus_gvalue_to_gvariant(GValue*, GVariantType*);
extern void g_dbus_gvariant_to_gvalue(GVariant*, GValue*);
extern int g_dbus_is_address(char*);
extern int g_dbus_is_error_name(char*);
extern int g_dbus_is_guid(char*);
extern int g_dbus_is_interface_name(char*);
extern int g_dbus_is_member_name(char*);
extern int g_dbus_is_name(char*);
extern int g_dbus_is_supported_address(char*, GError**);
extern int g_dbus_is_unique_name(char*);
extern uint8_t* g_dbus_unescape_object_path(char*);
extern GIOErrorEnum g_io_error_from_errno(int32_t);
extern uint32_t g_io_error_quark();
extern GList* g_io_modules_load_all_in_directory(char*);
extern GList* g_io_modules_load_all_in_directory_with_scope(char*, GIOModuleScope*);
extern void g_io_modules_scan_all_in_directory(char*);
extern void g_io_modules_scan_all_in_directory_with_scope(char*, GIOModuleScope*);
extern void g_io_scheduler_cancel_all_jobs();
extern void g_io_scheduler_push_job(GIOSchedulerJobFunc, void*, GDestroyNotify, int32_t, GCancellable*);
extern GSettingsBackend* g_keyfile_settings_backend_new(char*, char*, char*);
extern GSettingsBackend* g_memory_settings_backend_new();
extern void g_networking_init();
extern GSettingsBackend* g_null_settings_backend_new();
extern GSource* g_pollable_source_new(GObject*);
extern GSource* g_pollable_source_new_full(GObject*, GSource*, GCancellable*);
extern int64_t g_pollable_stream_read(GInputStream*, uint8_t*, uint64_t, int, GCancellable*, GError**);
extern int64_t g_pollable_stream_write(GOutputStream*, uint8_t*, uint64_t, int, GCancellable*, GError**);
extern int g_pollable_stream_write_all(GOutputStream*, uint8_t*, uint64_t, int, uint64_t*, GCancellable*, GError**);
extern uint32_t g_resolver_error_quark();
extern uint32_t g_resource_error_quark();
extern char** g_resources_enumerate_children(char*, GResourceLookupFlags, GError**);
extern int g_resources_get_info(char*, GResourceLookupFlags, uint64_t*, uint32_t*, GError**);
extern GBytes* g_resources_lookup_data(char*, GResourceLookupFlags, GError**);
extern GInputStream* g_resources_open_stream(char*, GResourceLookupFlags, GError**);
extern void g_simple_async_report_gerror_in_idle(GObject*, GAsyncReadyCallback, void*, GError*);
extern uint32_t g_tls_channel_binding_error_quark();
extern uint32_t g_tls_error_quark();
extern int g_unix_is_mount_path_system_internal(char*);
extern int g_unix_is_system_device_path(char*);
extern int g_unix_is_system_fs_type(char*);
extern GUnixMountEntry* g_unix_mount_at(char*, uint64_t*);
extern int32_t g_unix_mount_compare(GUnixMountEntry*, GUnixMountEntry*);
extern GUnixMountEntry* g_unix_mount_copy(GUnixMountEntry*);
extern GUnixMountEntry* g_unix_mount_for(char*, uint64_t*);
extern void g_unix_mount_free(GUnixMountEntry*);
extern char* g_unix_mount_get_device_path(GUnixMountEntry*);
extern char* g_unix_mount_get_fs_type(GUnixMountEntry*);
extern char* g_unix_mount_get_mount_path(GUnixMountEntry*);
extern char* g_unix_mount_get_options(GUnixMountEntry*);
extern char* g_unix_mount_get_root_path(GUnixMountEntry*);
extern int g_unix_mount_guess_can_eject(GUnixMountEntry*);
extern GIcon* g_unix_mount_guess_icon(GUnixMountEntry*);
extern char* g_unix_mount_guess_name(GUnixMountEntry*);
extern int g_unix_mount_guess_should_display(GUnixMountEntry*);
extern GIcon* g_unix_mount_guess_symbolic_icon(GUnixMountEntry*);
extern int g_unix_mount_is_readonly(GUnixMountEntry*);
extern int g_unix_mount_is_system_internal(GUnixMountEntry*);
extern int g_unix_mount_points_changed_since(uint64_t);
extern GList* g_unix_mount_points_get(uint64_t*);
extern int g_unix_mounts_changed_since(uint64_t);
extern GList* g_unix_mounts_get(uint64_t*);
struct _GActionEntry { uint8_t _data[64]; };
struct _GActionGroupInterface { uint8_t _data[128]; };
struct _GActionInterface { uint8_t _data[80]; };
struct _GActionMapInterface { uint8_t _data[40]; };
struct _GAppInfoIface { uint8_t _data[216]; };
struct _GAppLaunchContextClass { uint8_t _data[200]; };
struct _GAppLaunchContextPrivate {};
struct _GApplicationClass { uint8_t _data[312]; };
struct _GApplicationCommandLineClass { uint8_t _data[248]; };
struct _GApplicationCommandLinePrivate {};
struct _GApplicationPrivate {};
struct _GAsyncInitableIface { uint8_t _data[32]; };
struct _GAsyncResultIface { uint8_t _data[40]; };
struct _GBufferedInputStreamClass { uint8_t _data[336]; };
struct _GBufferedInputStreamPrivate {};
struct _GBufferedOutputStreamClass { uint8_t _data[336]; };
struct _GBufferedOutputStreamPrivate {};
struct _GCancellableClass { uint8_t _data[184]; };
struct _GCancellablePrivate {};
struct _GCharsetConverterClass { uint8_t _data[136]; };
struct _GConverterIface { uint8_t _data[32]; };
struct _GConverterInputStreamClass { uint8_t _data[312]; };
struct _GConverterInputStreamPrivate {};
struct _GConverterOutputStreamClass { uint8_t _data[360]; };
struct _GConverterOutputStreamPrivate {};
struct _GCredentialsClass {};
struct _GDBusAnnotationInfo { uint8_t _data[32]; };
struct _GDBusArgInfo { uint8_t _data[32]; };
struct _GDBusErrorEntry { uint8_t _data[16]; };
struct _GDBusInterfaceIface { uint8_t _data[48]; };
struct _GDBusInterfaceInfo { uint8_t _data[48]; };
struct _GDBusInterfaceSkeletonClass { uint8_t _data[304]; };
struct _GDBusInterfaceSkeletonPrivate {};
struct _GDBusInterfaceVTable { uint8_t _data[88]; };
struct _GDBusMethodInfo { uint8_t _data[40]; };
struct _GDBusNodeInfo { uint8_t _data[40]; };
struct _GDBusObjectIface { uint8_t _data[56]; };
struct _GDBusObjectManagerClientClass { uint8_t _data[216]; };
struct _GDBusObjectManagerClientPrivate {};
struct _GDBusObjectManagerIface { uint8_t _data[80]; };
struct _GDBusObjectManagerServerClass { uint8_t _data[200]; };
struct _GDBusObjectManagerServerPrivate {};
struct _GDBusObjectProxyClass { uint8_t _data[200]; };
struct _GDBusObjectProxyPrivate {};
struct _GDBusObjectSkeletonClass { uint8_t _data[208]; };
struct _GDBusObjectSkeletonPrivate {};
struct _GDBusPropertyInfo { uint8_t _data[40]; };
struct _GDBusProxyClass { uint8_t _data[408]; };
struct _GDBusProxyPrivate {};
struct _GDBusSignalInfo { uint8_t _data[32]; };
struct _GDBusSubtreeVTable { uint8_t _data[88]; };
struct _GDataInputStreamClass { uint8_t _data[376]; };
struct _GDataInputStreamPrivate {};
struct _GDataOutputStreamClass { uint8_t _data[360]; };
struct _GDataOutputStreamPrivate {};
struct _GDatagramBasedInterface { uint8_t _data[56]; };
struct _GDebugControllerDBusClass { uint8_t _data[240]; };
struct _GDebugControllerInterface { uint8_t _data[16]; };
struct _GDesktopAppInfoClass { uint8_t _data[136]; };
struct _GDesktopAppInfoLookupIface { uint8_t _data[24]; };
struct _GDriveIface { uint8_t _data[272]; };
struct _GDtlsClientConnectionInterface { uint8_t _data[16]; };
struct _GDtlsConnectionInterface { uint8_t _data[96]; };
struct _GDtlsServerConnectionInterface { uint8_t _data[16]; };
struct _GEmblemClass {};
struct _GEmblemedIconClass { uint8_t _data[136]; };
struct _GEmblemedIconPrivate {};
struct _GFileAttributeInfo { uint8_t _data[16]; };
struct _GFileAttributeInfoList { uint8_t _data[16]; };
struct _GFileAttributeMatcher {};
struct _GFileDescriptorBasedIface { uint8_t _data[24]; };
struct _GFileEnumeratorClass { uint8_t _data[240]; };
struct _GFileEnumeratorPrivate {};
struct _GFileIOStreamClass { uint8_t _data[368]; };
struct _GFileIOStreamPrivate {};
struct _GFileIconClass {};
struct _GFileIface { uint8_t _data[840]; };
struct _GFileInfoClass {};
struct _GFileInputStreamClass { uint8_t _data[336]; };
struct _GFileInputStreamPrivate {};
struct _GFileMonitorClass { uint8_t _data[192]; };
struct _GFileMonitorPrivate {};
struct _GFileOutputStreamClass { uint8_t _data[408]; };
struct _GFileOutputStreamPrivate {};
struct _GFilenameCompleterClass { uint8_t _data[168]; };
struct _GFilterInputStreamClass { uint8_t _data[272]; };
struct _GFilterOutputStreamClass { uint8_t _data[320]; };
struct _GIOExtension {};
struct _GIOExtensionPoint {};
struct _GIOModuleClass {};
struct _GIOModuleScope {};
struct _GIOSchedulerJob {};
struct _GIOStreamAdapter {};
struct _GIOStreamClass { uint8_t _data[256]; };
struct _GIOStreamPrivate {};
struct _GIconIface { uint8_t _data[56]; };
struct _GInetAddressClass { uint8_t _data[152]; };
struct _GInetAddressMaskClass { uint8_t _data[136]; };
struct _GInetAddressMaskPrivate {};
struct _GInetAddressPrivate {};
struct _GInetSocketAddressClass { uint8_t _data[160]; };
struct _GInetSocketAddressPrivate {};
struct _GInitableIface { uint8_t _data[24]; };
struct _GInputMessage { uint8_t _data[56]; };
struct _GInputStreamClass { uint8_t _data[248]; };
struct _GInputStreamPrivate {};
struct _GInputVector { uint8_t _data[16]; };
struct _GListModelInterface { uint8_t _data[40]; };
struct _GListStoreClass { uint8_t _data[136]; };
struct _GLoadableIconIface { uint8_t _data[40]; };
struct _GMemoryInputStreamClass { uint8_t _data[288]; };
struct _GMemoryInputStreamPrivate {};
struct _GMemoryMonitorInterface { uint8_t _data[24]; };
struct _GMemoryOutputStreamClass { uint8_t _data[336]; };
struct _GMemoryOutputStreamPrivate {};
struct _GMenuAttributeIterClass { uint8_t _data[144]; };
struct _GMenuAttributeIterPrivate {};
struct _GMenuLinkIterClass { uint8_t _data[144]; };
struct _GMenuLinkIterPrivate {};
struct _GMenuModelClass { uint8_t _data[200]; };
struct _GMenuModelPrivate {};
struct _GMountIface { uint8_t _data[232]; };
struct _GMountOperationClass { uint8_t _data[256]; };
struct _GMountOperationPrivate {};
struct _GNativeSocketAddressClass { uint8_t _data[160]; };
struct _GNativeSocketAddressPrivate {};
struct _GNativeVolumeMonitorClass { uint8_t _data[344]; };
struct _GNetworkAddressClass { uint8_t _data[136]; };
struct _GNetworkAddressPrivate {};
struct _GNetworkMonitorInterface { uint8_t _data[48]; };
struct _GNetworkServiceClass { uint8_t _data[136]; };
struct _GNetworkServicePrivate {};
struct _GOutputMessage { uint8_t _data[40]; };
struct _GOutputStreamClass { uint8_t _data[296]; };
struct _GOutputStreamPrivate {};
struct _GOutputVector { uint8_t _data[16]; };
struct _GPermissionClass { uint8_t _data[312]; };
struct _GPermissionPrivate {};
struct _GPollableInputStreamInterface { uint8_t _data[48]; };
struct _GPollableOutputStreamInterface { uint8_t _data[56]; };
struct _GPowerProfileMonitorInterface { uint8_t _data[16]; };
struct _GProxyAddressClass { uint8_t _data[160]; };
struct _GProxyAddressEnumeratorClass { uint8_t _data[216]; };
struct _GProxyAddressEnumeratorPrivate {};
struct _GProxyAddressPrivate {};
struct _GProxyInterface { uint8_t _data[48]; };
struct _GProxyResolverInterface { uint8_t _data[48]; };
struct _GRemoteActionGroupInterface { uint8_t _data[32]; };
struct _GResolverClass { uint8_t _data[264]; };
struct _GResolverPrivate {};
struct _GResource {};
struct _GSeekableIface { uint8_t _data[56]; };
struct _GSettingsBackendClass { uint8_t _data[400]; };
struct _GSettingsBackendPrivate {};
struct _GSettingsClass { uint8_t _data[328]; };
struct _GSettingsPrivate {};
struct _GSettingsSchema {};
struct _GSettingsSchemaKey {};
struct _GSettingsSchemaSource {};
struct _GSimpleActionGroupClass { uint8_t _data[232]; };
struct _GSimpleActionGroupPrivate {};
struct _GSimpleAsyncResultClass {};
struct _GSimpleProxyResolverClass { uint8_t _data[176]; };
struct _GSimpleProxyResolverPrivate {};
struct _GSocketAddressClass { uint8_t _data[160]; };
struct _GSocketAddressEnumeratorClass { uint8_t _data[160]; };
struct _GSocketClass { uint8_t _data[216]; };
struct _GSocketClientClass { uint8_t _data[176]; };
struct _GSocketClientPrivate {};
struct _GSocketConnectableIface { uint8_t _data[40]; };
struct _GSocketConnectionClass { uint8_t _data[304]; };
struct _GSocketConnectionPrivate {};
struct _GSocketControlMessageClass { uint8_t _data[216]; };
struct _GSocketControlMessagePrivate {};
struct _GSocketListenerClass { uint8_t _data[192]; };
struct _GSocketListenerPrivate {};
struct _GSocketPrivate {};
struct _GSocketServiceClass { uint8_t _data[248]; };
struct _GSocketServicePrivate {};
struct _GSrvTarget {};
struct _GStaticResource { uint8_t _data[40]; };
struct _GTaskClass {};
struct _GTcpConnectionClass { uint8_t _data[304]; };
struct _GTcpConnectionPrivate {};
struct _GTcpWrapperConnectionClass { uint8_t _data[304]; };
struct _GTcpWrapperConnectionPrivate {};
struct _GThemedIconClass {};
struct _GThreadedSocketServiceClass { uint8_t _data[296]; };
struct _GThreadedSocketServicePrivate {};
struct _GTlsBackendInterface { uint8_t _data[88]; };
struct _GTlsCertificateClass { uint8_t _data[208]; };
struct _GTlsCertificatePrivate {};
struct _GTlsClientConnectionInterface { uint8_t _data[24]; };
struct _GTlsConnectionClass { uint8_t _data[352]; };
struct _GTlsConnectionPrivate {};
struct _GTlsDatabaseClass { uint8_t _data[368]; };
struct _GTlsDatabasePrivate {};
struct _GTlsFileDatabaseInterface { uint8_t _data[80]; };
struct _GTlsInteractionClass { uint8_t _data[352]; };
struct _GTlsInteractionPrivate {};
struct _GTlsPasswordClass { uint8_t _data[192]; };
struct _GTlsPasswordPrivate {};
struct _GTlsServerConnectionInterface { uint8_t _data[16]; };
struct _GUnixConnectionClass { uint8_t _data[304]; };
struct _GUnixConnectionPrivate {};
struct _GUnixCredentialsMessageClass { uint8_t _data[232]; };
struct _GUnixCredentialsMessagePrivate {};
struct _GUnixFDListClass { uint8_t _data[176]; };
struct _GUnixFDListPrivate {};
struct _GUnixFDMessageClass { uint8_t _data[232]; };
struct _GUnixFDMessagePrivate {};
struct _GUnixInputStreamClass { uint8_t _data[288]; };
struct _GUnixInputStreamPrivate {};
struct _GUnixMountEntry {};
struct _GUnixMountMonitorClass {};
struct _GUnixMountPoint {};
struct _GUnixOutputStreamClass { uint8_t _data[336]; };
struct _GUnixOutputStreamPrivate {};
struct _GUnixSocketAddressClass { uint8_t _data[160]; };
struct _GUnixSocketAddressPrivate {};
struct _GVfsClass { uint8_t _data[272]; };
struct _GVolumeIface { uint8_t _data[184]; };
struct _GVolumeMonitorClass { uint8_t _data[336]; };
struct _GZlibCompressorClass { uint8_t _data[136]; };
struct _GZlibDecompressorClass { uint8_t _data[136]; };
